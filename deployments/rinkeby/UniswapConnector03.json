{
  "address": "0x343262Da556ec056D7169454Bae4B83456de4ab5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trader_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "FlashClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "FlashOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantityOptions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addShortLiquidityWithUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountRedeems",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPayout",
          "type": "uint256"
        }
      ],
      "name": "closeFlashLong",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "otherToken",
          "type": "address"
        }
      ],
      "name": "deployUniswapMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "flashLoanQuantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPayout",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "flashCloseLongOptionsThenSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "flashLoanQuantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPremium",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "flashMintShortOptionsThenSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "getUniswapMarketForTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "mintShortOptionsThenSwapToTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOption",
          "name": "optionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOptions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPremium",
          "type": "uint256"
        }
      ],
      "name": "openFlashLong",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "optionAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "otherTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeShortLiquidityThenCloseOptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trader",
      "outputs": [
        {
          "internalType": "contract ITrader",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV2Call",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x916d7f3457a975fa272e5f4b1399cb73ddc2be44b115897ef2a1261bfa371fe7",
  "receipt": {
    "to": null,
    "from": "0xE7D58d8554Eb0D5B5438848Af32Bf33EbdE477E7",
    "contractAddress": "0x343262Da556ec056D7169454Bae4B83456de4ab5",
    "transactionIndex": 4,
    "gasUsed": "3288205",
    "logsBloom": "0x
    "blockHash": "0xbfc9ae81d8f622e6e3b149ed214999f22f6f5accf97978bf1288dd0374192139",
    "transactionHash": "0x916d7f3457a975fa272e5f4b1399cb73ddc2be44b115897ef2a1261bfa371fe7",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 7567011,
        "transactionHash": "0x916d7f3457a975fa272e5f4b1399cb73ddc2be44b115897ef2a1261bfa371fe7",
        "address": "0x343262Da556ec056D7169454Bae4B83456de4ab5",
        "topics": [
          "0x908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6",
          "0x000000000000000000000000e7d58d8554eb0d5b5438848af32bf33ebde477e7"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xbfc9ae81d8f622e6e3b149ed214999f22f6f5accf97978bf1288dd0374192139"
      }
    ],
    "blockNumber": 7567011,
    "cumulativeGasUsed": "3591736",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
    "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
    "0x615a04282a457b2Dd73Fa297A22114ABE3E812cF"
  ],
  "solcInputHash": "d012b00f22f0a829e34d255d67f053a2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trader_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"FlashClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"FlashOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantityOptions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addShortLiquidityWithUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountRedeems\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPayout\",\"type\":\"uint256\"}],\"name\":\"closeFlashLong\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"otherToken\",\"type\":\"address\"}],\"name\":\"deployUniswapMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flashLoanQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPayout\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"flashCloseLongOptionsThenSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flashLoanQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPremium\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"flashMintShortOptionsThenSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getUniswapMarketForTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"mintShortOptionsThenSwapToTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOption\",\"name\":\"optionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOptions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPremium\",\"type\":\"uint256\"}],\"name\":\"openFlashLong\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"otherTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeShortLiquidityThenCloseOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trader\",\"outputs\":[{\"internalType\":\"contract ITrader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addShortLiquidityWithUnderlying(address,uint256,uint256,uint256,address,uint256)\":{\"details\":\"Adds redeemToken liquidity to a redeem<>token pair by minting shortOptionTokens with underlyingTokens.\",\"params\":{\"amountBMax\":\"The minimum quantity of shortOptionTokens expected to provide liquidity with.\",\"amountBMin\":\"The minimum quantity of otherTokens expected to provide liquidity with.\",\"deadline\":\"The timestamp to expire a pending transaction. \\r\",\"optionAddress\":\"The address of the optionToken to get the redeemToken to mint then provide liquidity for.\",\"quantityOptions\":\"The quantity of underlyingTokens to use to mint option + redeem tokens.\",\"to\":\"The address that receives UNI-V2 shares.\"}},\"closeFlashLong(address,uint256,uint256)\":{\"details\":\"Closes a longOptionToken position by flash swapping in redeemTokens, closing the option, and paying back in underlyingTokens.\",\"params\":{\"amountRedeems\":\"The quantity of redeemTokens to borrow to close the options.\",\"minPayout\":\"The minimum payout of underlyingTokens sent out to the user. \\r\",\"optionToken\":\"The address of the longOptionTokens to close.\"}},\"deployUniswapMarket(address,address)\":{\"details\":\"Creates a UniswapV2Pair by calling `createPair` on the UniswapV2Factory.\"},\"flashCloseLongOptionsThenSwap(address,address,uint256,uint256,address[],address)\":{\"details\":\"Sends shortOptionTokens to msg.sender, and pays back the UniswapV2Pair in underlyingTokens.\",\"params\":{\"flashLoanQuantity\":\"The quantity of shortOptionTokens borrowed to use to close longOptionTokens.\",\"minPayout\":\"The minimum payout of underlyingTokens sent to the `to` address.\",\"optionAddress\":\"The address of the longOptionTokes to close.\",\"pairAddress\":\"The address of the redeemToken<>underlyingToken UniswapV2Pair contract.\",\"path\":\"underlyingTokens -> shortOptionTokens, because we are paying the input of underlyingTokens.\",\"to\":\"The address which is sent the underlyingToken payout, or liable to pay for a negative payout.\"}},\"flashMintShortOptionsThenSwap(address,address,uint256,uint256,address[],address)\":{\"details\":\"Receives underlyingTokens from a UniswapV2Pair.swap() call from a pair with reserve0 = shortOptionTokens and reserve1 = underlyingTokens. Uses underlyingTokens to mint long (option) + short (redeem) tokens. Sends longOptionTokens to msg.sender, and pays back the UniswapV2Pair the shortOptionTokens, AND any remainder quantity of underlyingTokens (paid by msg.sender).\",\"params\":{\"flashLoanQuantity\":\"The quantity of options to mint using borrowed underlyingTokens.\",\"maxPremium\":\"The maximum quantity of underlyingTokens to pay for the optionTokens.\",\"optionAddress\":\"The address of the Option contract.\",\"path\":\"The token addresses to trade through using their Uniswap V2 pools. Assumes path[0] = shortOptionToken.\",\"to\":\"The address to send the shortOptionToken proceeds and longOptionTokens to.\"},\"returns\":{\"_0\":\"success bool Whether the transaction was successful or not. \\r\"}},\"getName()\":{\"details\":\"Gets the name of the contract.\"},\"getUniswapMarketForTokens(address,address)\":{\"details\":\"Gets a UniswapV2Pair address for two tokens by calling the UniswapV2Factory.\"},\"getVersion()\":{\"details\":\"Gets the version of the contract.\"},\"mintShortOptionsThenSwapToTokens(address,uint256,uint256,address[],address,uint256)\":{\"details\":\"Mints long + short option tokens, then swaps the shortOptionTokens (redeem) for tokens.\",\"params\":{\"amountIn\":\"The quantity of options to mint.\",\"amountOutMin\":\"The minimum quantity of tokens to receive in exchange for the shortOptionTokens.\",\"deadline\":\"The timestamp for a trade to fail at if not successful.\",\"optionToken\":\"The address of the Option contract.\",\"path\":\"The token addresses to trade through using their Uniswap V2 pools. Assumes path[0] = shortOptionToken.\",\"to\":\"The address to send the shortOptionToken proceeds and longOptionTokens to.\"},\"returns\":{\"_0\":\"bool Whether the transaction was successful or not. \\r\"}},\"openFlashLong(address,uint256,uint256)\":{\"details\":\"Opens a longOptionToken position by minting long + short tokens, then selling the short tokens.\",\"params\":{\"amountOptions\":\"The quantity of longOptionTokens to purchase.\",\"maxPremium\":\"The maximum quantity of underlyingTokens to pay for the optionTokens. \\r\",\"optionToken\":\"The option address.\"}},\"removeShortLiquidityThenCloseOptions(address,address,uint256,uint256,uint256,address,uint256)\":{\"details\":\"Combines Uniswap V2 Router \\\"removeLiquidity\\\" function with Primitive \\\"closeOptions\\\" function.\",\"params\":{\"amountAMin\":\"The minimum quantity of shortOptionTokens to receive from removing liquidity.\",\"amountBMin\":\"The minimum quantity of quoteTokens to receive from removing liquidity.\",\"deadline\":\"The timestamp to expire a pending transaction. \\r\",\"liquidity\":\"The quantity of liquidity tokens to pull from msg.sender and burn.\",\"optionAddress\":\"The address of the option that will be closed from burned UNI-V2 liquidity shares.\",\"otherTokenAddress\":\"The address of the other token in the option pair.\",\"to\":\"The address that receives quoteTokens from burned UNI-V2, and underlyingTokens from closed options.\"}},\"uniswapV2Call(address,uint256,uint256,bytes)\":{\"details\":\"The callback function triggered in a UniswapV2Pair.swap() call when the `data` parameter has data.\",\"params\":{\"amount0\":\"The quantity of token0 received to the `to` address in the swap() call.\",\"amount1\":\"The quantity of token1 received to the `to` address in the swap() call.\",\"data\":\"The payload passed in the `data` parameter of the swap() call. \\r\",\"sender\":\"The original msg.sender of the UniswapV2Pair.swap() call.\"}}}},\"userdoc\":{\"methods\":{\"addShortLiquidityWithUnderlying(address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Pulls underlying tokens from msg.sender and pushes UNI-V2 liquidity tokens to the \\\"to\\\" address. underlyingToken -> redeemToken -> UNI-V2.\"},\"closeFlashLong(address,uint256,uint256)\":{\"notice\":\"IMPORTANT: If minPayout is 0, this function will cost the caller to close the option, for no gain.\"},\"flashCloseLongOptionsThenSwap(address,address,uint256,uint256,address[],address)\":{\"notice\":\"IMPORTANT: If minPayout is 0, the `to` address is liable for negative payouts *if* that occurs.\"},\"flashMintShortOptionsThenSwap(address,address,uint256,uint256,address[],address)\":{\"notice\":\"If the first address in the path is not the shortOptionToken address, the tx will fail.\"},\"mintShortOptionsThenSwapToTokens(address,uint256,uint256,address[],address,uint256)\":{\"notice\":\"If the first address in the path is not the shortOptionToken address, the tx will fail. underlyingToken -> shortOptionToken -> quoteToken. IMPORTANT: redeemTokens = shortOptionTokens\"},\"openFlashLong(address,uint256,uint256)\":{\"notice\":\"IMPORTANT: amountOutMin parameter is the price to swap shortOptionTokens to underlyingTokens. IMPORTANT: If the ratio between shortOptionTokens and underlyingTokens is 1:1, then only the swap fee (0.30%) has to be paid.\"},\"removeShortLiquidityThenCloseOptions(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Pulls UNI-V2 liquidity shares with shortOption<>quote token, and optionTokens from msg.sender. Then closes the longOptionTokens and withdraws underlyingTokens to the \\\"to\\\" address. Sends quoteTokens from the burned UNI-V2 liquidity shares to the \\\"to\\\" address. UNI-V2 -> optionToken -> underlyingToken.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapConnector03.sol\":\"UniswapConnector03\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb\"},\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IOption is IERC20 {\\r\\n    function mintOptions(address receiver) external returns (uint256, uint256);\\r\\n\\r\\n    function exerciseOptions(\\r\\n        address receiver,\\r\\n        uint256 outUnderlyings,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function redeemStrikeTokens(address receiver) external returns (uint256);\\r\\n\\r\\n    function closeOptions(address receiver)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function redeemToken() external view returns (address);\\r\\n\\r\\n    function getStrikeTokenAddress() external view returns (address);\\r\\n\\r\\n    function getUnderlyingTokenAddress() external view returns (address);\\r\\n\\r\\n    function getBaseValue() external view returns (uint256);\\r\\n\\r\\n    function getQuoteValue() external view returns (uint256);\\r\\n\\r\\n    function getExpiryTime() external view returns (uint256);\\r\\n\\r\\n    function underlyingCache() external view returns (uint256);\\r\\n\\r\\n    function strikeCache() external view returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function getCacheBalances() external view returns (uint256, uint256);\\r\\n\\r\\n    function getAssetAddresses()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            address,\\r\\n            address\\r\\n        );\\r\\n\\r\\n    function getParameters()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address _underlyingToken,\\r\\n            address _strikeToken,\\r\\n            address _redeemToken,\\r\\n            uint256 _base,\\r\\n            uint256 _quote,\\r\\n            uint256 _expiry\\r\\n        );\\r\\n\\r\\n    function initRedeemToken(address _redeemToken) external;\\r\\n\\r\\n    function updateCacheBalances() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xef573689b839d22f4b00611baecc3bd095c2a9ca047a677168c99c41741119bb\"},\"@primitivefi/contracts/contracts/option/interfaces/ITrader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport { IOption } from \\\"./IOption.sol\\\";\\r\\n\\r\\ninterface ITrader {\\r\\n    function safeMint(\\r\\n        IOption optionToken,\\r\\n        uint256 mintQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function safeExercise(\\r\\n        IOption optionToken,\\r\\n        uint256 exerciseQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function safeRedeem(\\r\\n        IOption optionToken,\\r\\n        uint256 redeemQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function safeClose(\\r\\n        IOption optionToken,\\r\\n        uint256 closeQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function safeUnwind(\\r\\n        IOption optionToken,\\r\\n        uint256 unwindQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xb8f9e6d923e556e137a606c76e9adf8fd07375c7ff0650f4a7932adc950df44f\"},\"@primitivefi/contracts/contracts/option/libraries/TraderLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n/**\\r\\n * @title   Trader Library\\r\\n * @notice  Internal functions that can be used to safeTransfer\\r\\n *          tokens into the option contract then call respective option contract functions.\\r\\n * @author  Primitive\\r\\n */\\r\\n\\r\\nimport { IOption } from \\\"../interfaces/IOption.sol\\\";\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary TraderLib {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /**\\r\\n     * @dev Conducts important safety checks to safely mint option tokens.\\r\\n     * @param optionToken The address of the option token to mint.\\r\\n     * @param mintQuantity The quantity of option tokens to mint.\\r\\n     * @param receiver The address which receives the minted option tokens.\\r\\n     */\\r\\n    function safeMint(\\r\\n        IOption optionToken,\\r\\n        uint256 mintQuantity,\\r\\n        address receiver\\r\\n    ) internal returns (uint256, uint256) {\\r\\n        require(mintQuantity > 0, \\\"ERR_ZERO\\\");\\r\\n        IERC20(optionToken.getUnderlyingTokenAddress()).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(optionToken),\\r\\n            mintQuantity\\r\\n        );\\r\\n        (uint256 outputOptions, uint256 outputRedeems) = optionToken\\r\\n            .mintOptions(receiver);\\r\\n        return (outputOptions, outputRedeems);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swaps strikeTokens to underlyingTokens using the strike ratio as the exchange rate.\\r\\n     * @notice Burns optionTokens, option contract receives strikeTokens, user receives underlyingTokens.\\r\\n     * @param optionToken The address of the option contract.\\r\\n     * @param exerciseQuantity Quantity of optionTokens to exercise.\\r\\n     * @param receiver The underlyingTokens are sent to the receiver address.\\r\\n     */\\r\\n    function safeExercise(\\r\\n        IOption optionToken,\\r\\n        uint256 exerciseQuantity,\\r\\n        address receiver\\r\\n    ) internal returns (uint256, uint256) {\\r\\n        require(exerciseQuantity > 0, \\\"ERR_ZERO\\\");\\r\\n        require(\\r\\n            IERC20(address(optionToken)).balanceOf(msg.sender) >=\\r\\n                exerciseQuantity,\\r\\n            \\\"ERR_BAL_OPTIONS\\\"\\r\\n        );\\r\\n\\r\\n        // Calculate quantity of strikeTokens needed to exercise quantity of optionTokens.\\r\\n        uint256 inputStrikes = exerciseQuantity\\r\\n            .mul(optionToken.getQuoteValue())\\r\\n            .div(optionToken.getBaseValue());\\r\\n        require(\\r\\n            IERC20(optionToken.getStrikeTokenAddress()).balanceOf(msg.sender) >=\\r\\n                inputStrikes,\\r\\n            \\\"ERR_BAL_STRIKE\\\"\\r\\n        );\\r\\n        IERC20(optionToken.getStrikeTokenAddress()).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(optionToken),\\r\\n            inputStrikes\\r\\n        );\\r\\n        IERC20(address(optionToken)).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(optionToken),\\r\\n            exerciseQuantity\\r\\n        );\\r\\n\\r\\n        uint256 inputOptions;\\r\\n        (inputStrikes, inputOptions) = optionToken.exerciseOptions(\\r\\n            receiver,\\r\\n            exerciseQuantity,\\r\\n            new bytes(0)\\r\\n        );\\r\\n        return (inputStrikes, inputOptions);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns redeemTokens to withdraw available strikeTokens.\\r\\n     * @notice inputRedeems = outputStrikes.\\r\\n     * @param optionToken The address of the option contract.\\r\\n     * @param redeemQuantity redeemQuantity of redeemTokens to burn.\\r\\n     * @param receiver The strikeTokens are sent to the receiver address.\\r\\n     */\\r\\n    function safeRedeem(\\r\\n        IOption optionToken,\\r\\n        uint256 redeemQuantity,\\r\\n        address receiver\\r\\n    ) internal returns (uint256) {\\r\\n        require(redeemQuantity > 0, \\\"ERR_ZERO\\\");\\r\\n        require(\\r\\n            IERC20(optionToken.redeemToken()).balanceOf(msg.sender) >=\\r\\n                redeemQuantity,\\r\\n            \\\"ERR_BAL_REDEEM\\\"\\r\\n        );\\r\\n        // There can be the case there is no available strikes to redeem, causing a revert.\\r\\n        IERC20(optionToken.redeemToken()).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(optionToken),\\r\\n            redeemQuantity\\r\\n        );\\r\\n        uint256 inputRedeems = optionToken.redeemStrikeTokens(receiver);\\r\\n        return inputRedeems;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burn optionTokens and redeemTokens to withdraw underlyingTokens.\\r\\n     * @notice The redeemTokens to burn is equal to the optionTokens * strike ratio.\\r\\n     * inputOptions = inputRedeems / strike ratio = outUnderlyings\\r\\n     * @param optionToken The address of the option contract.\\r\\n     * @param closeQuantity Quantity of optionTokens to burn.\\r\\n     * (Implictly will burn the strike ratio quantity of redeemTokens).\\r\\n     * @param receiver The underlyingTokens are sent to the receiver address.\\r\\n     */\\r\\n    function safeClose(\\r\\n        IOption optionToken,\\r\\n        uint256 closeQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        internal\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        require(closeQuantity > 0, \\\"ERR_ZERO\\\");\\r\\n        require(\\r\\n            IERC20(address(optionToken)).balanceOf(msg.sender) >= closeQuantity,\\r\\n            \\\"ERR_BAL_OPTIONS\\\"\\r\\n        );\\r\\n\\r\\n        // Calculate the quantity of redeemTokens that need to be burned. (What we mean by Implicit).\\r\\n        uint256 inputRedeems = closeQuantity\\r\\n            .mul(optionToken.getQuoteValue())\\r\\n            .div(optionToken.getBaseValue());\\r\\n        require(\\r\\n            IERC20(optionToken.redeemToken()).balanceOf(msg.sender) >=\\r\\n                inputRedeems,\\r\\n            \\\"ERR_BAL_REDEEM\\\"\\r\\n        );\\r\\n        IERC20(optionToken.redeemToken()).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(optionToken),\\r\\n            inputRedeems\\r\\n        );\\r\\n        IERC20(address(optionToken)).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(optionToken),\\r\\n            closeQuantity\\r\\n        );\\r\\n\\r\\n        uint256 inputOptions;\\r\\n        uint256 outUnderlyings;\\r\\n        (inputRedeems, inputOptions, outUnderlyings) = optionToken.closeOptions(\\r\\n            receiver\\r\\n        );\\r\\n        return (inputRedeems, inputOptions, outUnderlyings);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burn redeemTokens to withdraw underlyingTokens and strikeTokens from expired options.\\r\\n     * @param optionToken The address of the option contract.\\r\\n     * @param unwindQuantity Quantity of option tokens used to calculate the amount of redeem tokens to burn.\\r\\n     * @param receiver The underlyingTokens are sent to the receiver address and the redeemTokens are burned.\\r\\n     */\\r\\n    function safeUnwind(\\r\\n        IOption optionToken,\\r\\n        uint256 unwindQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        internal\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        // Checks\\r\\n        require(unwindQuantity > 0, \\\"ERR_ZERO\\\");\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        require(\\r\\n            optionToken.getExpiryTime() < block.timestamp,\\r\\n            \\\"ERR_NOT_EXPIRED\\\"\\r\\n        );\\r\\n\\r\\n        // Calculate amount of redeems required\\r\\n        uint256 inputRedeems = unwindQuantity\\r\\n            .mul(optionToken.getQuoteValue())\\r\\n            .div(optionToken.getBaseValue());\\r\\n        require(\\r\\n            IERC20(optionToken.redeemToken()).balanceOf(msg.sender) >=\\r\\n                inputRedeems,\\r\\n            \\\"ERR_BAL_REDEEM\\\"\\r\\n        );\\r\\n        IERC20(optionToken.redeemToken()).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(optionToken),\\r\\n            inputRedeems\\r\\n        );\\r\\n\\r\\n        uint256 inputOptions;\\r\\n        uint256 outUnderlyings;\\r\\n        (inputRedeems, inputOptions, outUnderlyings) = optionToken.closeOptions(\\r\\n            receiver\\r\\n        );\\r\\n\\r\\n        return (inputRedeems, inputOptions, outUnderlyings);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x51be231a418ac2c24bd41de288598448ba50754d7b0577e6d432856b90ed7464\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xdb17a1fb73e261e736ae8862be2d9a32964fc4b3741f48980f5cdc9d92b99a96\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/UniswapConnector03.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n///\\r\\n/// @title   Combines Uniswap V2 Protocol functions with Primitive V1.\\r\\n/// @notice  Primitive V1 UniswapConnector03 - @primitivefi/contracts@v0.4.2\\r\\n/// @author  Primitive\\r\\n///\\r\\n\\r\\n// Uniswap V2 & Primitive V1\\r\\nimport {\\r\\n    IUniswapV2Callee\\r\\n} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\\\";\\r\\nimport {\\r\\n    IUniswapV2Pair\\r\\n} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport {\\r\\n    IUniswapConnector03,\\r\\n    IUniswapV2Router02,\\r\\n    IUniswapV2Factory,\\r\\n    IOption,\\r\\n    ITrader,\\r\\n    IERC20\\r\\n} from \\\"./interfaces/IUniswapConnector03.sol\\\";\\r\\nimport { UniswapConnectorLib03 } from \\\"./libraries/UniswapConnectorLib03.sol\\\";\\r\\n// Open Zeppelin\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {\\r\\n    ReentrancyGuard\\r\\n} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract UniswapConnector03 is\\r\\n    IUniswapConnector03,\\r\\n    IUniswapV2Callee,\\r\\n    ReentrancyGuard\\r\\n{\\r\\n    using SafeERC20 for IERC20; // Reverts when `transfer` or `transferFrom` erc20 calls don't return proper data\\r\\n    using SafeMath for uint256; // Reverts on math underflows/overflows\\r\\n\\r\\n    ITrader public override trader; // The Primitive contract used to interact with the protocol\\r\\n    IUniswapV2Factory public override factory; // The Uniswap V2 factory contract to get pair addresses from\\r\\n    IUniswapV2Router02 public override router; // The Uniswap contract used to interact with the protocol\\r\\n\\r\\n    event Initialized(address indexed from); // Emmitted on deployment\\r\\n    event FlashOpened(address indexed from, uint256 quantity, uint256 premium); // Emmitted on flash opening a long position\\r\\n    event FlashClosed(address indexed from, uint256 quantity, uint256 payout);\\r\\n\\r\\n    // ==== Constructor ====\\r\\n\\r\\n    constructor(\\r\\n        address router_,\\r\\n        address factory_,\\r\\n        address trader_\\r\\n    ) public {\\r\\n        require(address(router) == address(0x0), \\\"ERR_INITIALIZED\\\");\\r\\n        require(address(factory) == address(0x0), \\\"ERR_INITIALIZED\\\");\\r\\n        require(address(trader) == address(0x0), \\\"ERR_INITIALIZED\\\");\\r\\n        router = IUniswapV2Router02(router_);\\r\\n        factory = IUniswapV2Factory(factory_);\\r\\n        trader = ITrader(trader_);\\r\\n        emit Initialized(msg.sender);\\r\\n    }\\r\\n\\r\\n    // ==== Combo Operations ====\\r\\n\\r\\n    ///\\r\\n    /// @dev Mints long + short option tokens, then swaps the shortOptionTokens (redeem) for tokens.\\r\\n    /// @notice If the first address in the path is not the shortOptionToken address, the tx will fail.\\r\\n    /// underlyingToken -> shortOptionToken -> quoteToken.\\r\\n    /// IMPORTANT: redeemTokens = shortOptionTokens\\r\\n    /// @param optionToken The address of the Option contract.\\r\\n    /// @param amountIn The quantity of options to mint.\\r\\n    /// @param amountOutMin The minimum quantity of tokens to receive in exchange for the shortOptionTokens.\\r\\n    /// @param path The token addresses to trade through using their Uniswap V2 pools. Assumes path[0] = shortOptionToken.\\r\\n    /// @param to The address to send the shortOptionToken proceeds and longOptionTokens to.\\r\\n    /// @param deadline The timestamp for a trade to fail at if not successful.\\r\\n    /// @return bool Whether the transaction was successful or not.\\r\\n    ///\\r\\n    function mintShortOptionsThenSwapToTokens(\\r\\n        IOption optionToken,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external override nonReentrant returns (bool) {\\r\\n        bool success = UniswapConnectorLib03.mintShortOptionsThenSwapToTokens(\\r\\n            router,\\r\\n            optionToken,\\r\\n            amountIn,\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    // ==== Flash Functions ====\\r\\n\\r\\n    ///\\r\\n    /// @dev Receives underlyingTokens from a UniswapV2Pair.swap() call from a pair with\\r\\n    /// reserve0 = shortOptionTokens and reserve1 = underlyingTokens.\\r\\n    /// Uses underlyingTokens to mint long (option) + short (redeem) tokens.\\r\\n    /// Sends longOptionTokens to msg.sender, and pays back the UniswapV2Pair the shortOptionTokens,\\r\\n    /// AND any remainder quantity of underlyingTokens (paid by msg.sender).\\r\\n    /// @notice If the first address in the path is not the shortOptionToken address, the tx will fail.\\r\\n    /// @param optionAddress The address of the Option contract.\\r\\n    /// @param flashLoanQuantity The quantity of options to mint using borrowed underlyingTokens.\\r\\n    /// @param maxPremium The maximum quantity of underlyingTokens to pay for the optionTokens.\\r\\n    /// @param path The token addresses to trade through using their Uniswap V2 pools. Assumes path[0] = shortOptionToken.\\r\\n    /// @param to The address to send the shortOptionToken proceeds and longOptionTokens to.\\r\\n    /// @return success bool Whether the transaction was successful or not.\\r\\n    ///\\r\\n    function flashMintShortOptionsThenSwap(\\r\\n        address pairAddress,\\r\\n        address optionAddress,\\r\\n        uint256 flashLoanQuantity,\\r\\n        uint256 maxPremium,\\r\\n        address[] memory path,\\r\\n        address to\\r\\n    ) public override returns (uint256, uint256) {\\r\\n        (uint256 outputOptions, uint256 loanRemainder) = UniswapConnectorLib03\\r\\n            .flashMintShortOptionsThenSwap(\\r\\n            router,\\r\\n            pairAddress,\\r\\n            optionAddress,\\r\\n            flashLoanQuantity,\\r\\n            maxPremium,\\r\\n            path,\\r\\n            to\\r\\n        );\\r\\n        emit FlashOpened(msg.sender, outputOptions, loanRemainder);\\r\\n        return (outputOptions, loanRemainder);\\r\\n    }\\r\\n\\r\\n    /// @dev Sends shortOptionTokens to msg.sender, and pays back the UniswapV2Pair in underlyingTokens.\\r\\n    /// @notice IMPORTANT: If minPayout is 0, the `to` address is liable for negative payouts *if* that occurs.\\r\\n    /// @param pairAddress The address of the redeemToken<>underlyingToken UniswapV2Pair contract.\\r\\n    /// @param optionAddress The address of the longOptionTokes to close.\\r\\n    /// @param flashLoanQuantity The quantity of shortOptionTokens borrowed to use to close longOptionTokens.\\r\\n    /// @param minPayout The minimum payout of underlyingTokens sent to the `to` address.\\r\\n    /// @param path underlyingTokens -> shortOptionTokens, because we are paying the input of underlyingTokens.\\r\\n    /// @param to The address which is sent the underlyingToken payout, or liable to pay for a negative payout.\\r\\n    function flashCloseLongOptionsThenSwap(\\r\\n        address pairAddress,\\r\\n        address optionAddress,\\r\\n        uint256 flashLoanQuantity,\\r\\n        uint256 minPayout,\\r\\n        address[] memory path,\\r\\n        address to\\r\\n    ) public override returns (uint256, uint256) {\\r\\n        (\\r\\n            uint256 outputUnderlyings,\\r\\n            uint256 underlyingPayout\\r\\n        ) = UniswapConnectorLib03.flashCloseLongOptionsThenSwap(\\r\\n            router,\\r\\n            pairAddress,\\r\\n            optionAddress,\\r\\n            flashLoanQuantity,\\r\\n            minPayout,\\r\\n            path,\\r\\n            to\\r\\n        );\\r\\n        emit FlashClosed(msg.sender, outputUnderlyings, underlyingPayout);\\r\\n        return (outputUnderlyings, underlyingPayout);\\r\\n    }\\r\\n\\r\\n    ///\\r\\n    /// @dev Opens a longOptionToken position by minting long + short tokens, then selling the short tokens.\\r\\n    /// @notice IMPORTANT: amountOutMin parameter is the price to swap shortOptionTokens to underlyingTokens.\\r\\n    /// IMPORTANT: If the ratio between shortOptionTokens and underlyingTokens is 1:1, then only the swap fee (0.30%) has to be paid.\\r\\n    /// @param optionToken The option address.\\r\\n    /// @param amountOptions The quantity of longOptionTokens to purchase.\\r\\n    /// @param maxPremium The maximum quantity of underlyingTokens to pay for the optionTokens.\\r\\n    ///\\r\\n    function openFlashLong(\\r\\n        IOption optionToken,\\r\\n        uint256 amountOptions,\\r\\n        uint256 maxPremium\\r\\n    ) external override nonReentrant returns (bool) {\\r\\n        address redeemToken = optionToken.redeemToken();\\r\\n        address underlyingToken = optionToken.getUnderlyingTokenAddress();\\r\\n        address pairAddress = factory.getPair(redeemToken, underlyingToken);\\r\\n\\r\\n        // Build the path to get the appropriate reserves to borrow from, and then pay back.\\r\\n        // We are borrowing from reserve1 then paying it back mostly in reserve0.\\r\\n        // Borrowing underlyingTokens, paying back in shortOptionTokens (normal swap). Pay any remainder in underlyingTokens.\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = redeemToken;\\r\\n        path[1] = underlyingToken;\\r\\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\r\\n\\r\\n        bytes4 selector = bytes4(\\r\\n            keccak256(\\r\\n                bytes(\\r\\n                    \\\"flashMintShortOptionsThenSwap(address,address,uint256,uint256,address[],address)\\\"\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        bytes memory params = abi.encodeWithSelector(\\r\\n            selector, // function to call in this contract\\r\\n            pairAddress, // pair contract we are borrowing from\\r\\n            optionToken, // option token to mint with flash loaned tokens\\r\\n            amountOptions, // quantity of underlyingTokens from flash loan to use to mint options\\r\\n            maxPremium, // total price paid (in underlyingTokens) for selling shortOptionTokens\\r\\n            path, // redeemToken -> underlyingToken\\r\\n            msg.sender // address to pull the remainder loan amount to pay, and send longOptionTokens to.\\r\\n        );\\r\\n\\r\\n        // Receives 0 quoteTokens and `amountOptions` of underlyingTokens to `this` contract address.\\r\\n        // Then executes `flashMintShortOptionsThenSwap`.\\r\\n        uint256 amount0Out = pair.token0() == underlyingToken\\r\\n            ? amountOptions\\r\\n            : 0;\\r\\n        uint256 amount1Out = pair.token0() == underlyingToken\\r\\n            ? 0\\r\\n            : amountOptions;\\r\\n\\r\\n        // Borrow the amountOptions quantity of underlyingTokens and execute the callback function using params.\\r\\n        pair.swap(amount0Out, amount1Out, address(this), params);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    ///\\r\\n    /// @dev Closes a longOptionToken position by flash swapping in redeemTokens,\\r\\n    /// closing the option, and paying back in underlyingTokens.\\r\\n    /// @notice IMPORTANT: If minPayout is 0, this function will cost the caller to close the option, for no gain.\\r\\n    /// @param optionToken The address of the longOptionTokens to close.\\r\\n    /// @param amountRedeems The quantity of redeemTokens to borrow to close the options.\\r\\n    /// @param minPayout The minimum payout of underlyingTokens sent out to the user.\\r\\n    ///\\r\\n    function closeFlashLong(\\r\\n        IOption optionToken,\\r\\n        uint256 amountRedeems,\\r\\n        uint256 minPayout\\r\\n    ) external override nonReentrant returns (bool) {\\r\\n        address redeemToken = optionToken.redeemToken();\\r\\n        address underlyingToken = optionToken.getUnderlyingTokenAddress();\\r\\n        address pairAddress = factory.getPair(redeemToken, underlyingToken);\\r\\n\\r\\n        // Build the path to get the appropriate reserves to borrow from, and then pay back.\\r\\n        // We are borrowing from reserve1 then paying it back mostly in reserve0.\\r\\n        // Borrowing redeemTokens, paying back in underlyingTokens (normal swap).\\r\\n        // Pay any remainder in underlyingTokens.\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = underlyingToken;\\r\\n        path[1] = redeemToken;\\r\\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\r\\n\\r\\n        bytes4 selector = bytes4(\\r\\n            keccak256(\\r\\n                bytes(\\r\\n                    \\\"flashCloseLongOptionsThenSwap(address,address,uint256,uint256,address[],address)\\\"\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        bytes memory params = abi.encodeWithSelector(\\r\\n            selector, // function to call in this contract\\r\\n            pairAddress, // pair contract we are borrowing from\\r\\n            optionToken, // option token to close with flash loaned redeemTokens\\r\\n            amountRedeems, // quantity of redeemTokens from flash loan to use to close options\\r\\n            minPayout, // total remaining underlyingTokens after flash loan is paid\\r\\n            path, // underlyingToken -> redeemToken\\r\\n            msg.sender // address to send payout of underlyingTokens to. Will pull underlyingTokens if negative payout and minPayout <= 0.\\r\\n        );\\r\\n\\r\\n        // Receives 0 underlyingTokens and `amountRedeems` of redeemTokens to `this` contract address.\\r\\n        // Then executes `flashCloseLongOptionsThenSwap`.\\r\\n        uint256 amount0Out = pair.token0() == redeemToken ? amountRedeems : 0;\\r\\n        uint256 amount1Out = pair.token0() == redeemToken ? 0 : amountRedeems;\\r\\n\\r\\n        // Borrow the amountRedeems quantity of redeemTokens and execute the callback function using params.\\r\\n        pair.swap(amount0Out, amount1Out, address(this), params);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ==== Liquidity Functions ====\\r\\n\\r\\n    ///\\r\\n    /// @dev Adds redeemToken liquidity to a redeem<>token pair by minting shortOptionTokens with underlyingTokens.\\r\\n    /// @notice Pulls underlying tokens from msg.sender and pushes UNI-V2 liquidity tokens to the \\\"to\\\" address.\\r\\n    /// underlyingToken -> redeemToken -> UNI-V2.\\r\\n    /// @param optionAddress The address of the optionToken to get the redeemToken to mint then provide liquidity for.\\r\\n    /// @param quantityOptions The quantity of underlyingTokens to use to mint option + redeem tokens.\\r\\n    /// @param amountBMax The minimum quantity of shortOptionTokens expected to provide liquidity with.\\r\\n    /// @param amountBMin The minimum quantity of otherTokens expected to provide liquidity with.\\r\\n    /// @param to The address that receives UNI-V2 shares.\\r\\n    /// @param deadline The timestamp to expire a pending transaction.\\r\\n    ///\\r\\n    function addShortLiquidityWithUnderlying(\\r\\n        address optionAddress,\\r\\n        uint256 quantityOptions,\\r\\n        uint256 amountBMax,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return\\r\\n            UniswapConnectorLib03.addShortLiquidityWithUnderlying(\\r\\n                router,\\r\\n                optionAddress,\\r\\n                quantityOptions,\\r\\n                amountBMax,\\r\\n                amountBMin,\\r\\n                to,\\r\\n                deadline\\r\\n            );\\r\\n    }\\r\\n\\r\\n    ///\\r\\n    /// @dev Combines Uniswap V2 Router \\\"removeLiquidity\\\" function with Primitive \\\"closeOptions\\\" function.\\r\\n    /// @notice Pulls UNI-V2 liquidity shares with shortOption<>quote token, and optionTokens from msg.sender.\\r\\n    /// Then closes the longOptionTokens and withdraws underlyingTokens to the \\\"to\\\" address.\\r\\n    /// Sends quoteTokens from the burned UNI-V2 liquidity shares to the \\\"to\\\" address.\\r\\n    /// UNI-V2 -> optionToken -> underlyingToken.\\r\\n    /// @param optionAddress The address of the option that will be closed from burned UNI-V2 liquidity shares.\\r\\n    /// @param otherTokenAddress The address of the other token in the option pair.\\r\\n    /// @param liquidity The quantity of liquidity tokens to pull from msg.sender and burn.\\r\\n    /// @param amountAMin The minimum quantity of shortOptionTokens to receive from removing liquidity.\\r\\n    /// @param amountBMin The minimum quantity of quoteTokens to receive from removing liquidity.\\r\\n    /// @param to The address that receives quoteTokens from burned UNI-V2, and underlyingTokens from closed options.\\r\\n    /// @param deadline The timestamp to expire a pending transaction.\\r\\n    ///\\r\\n    function removeShortLiquidityThenCloseOptions(\\r\\n        address optionAddress,\\r\\n        address otherTokenAddress,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external override nonReentrant returns (uint256, uint256) {\\r\\n        return\\r\\n            UniswapConnectorLib03.removeShortLiquidityThenCloseOptions(\\r\\n                factory,\\r\\n                router,\\r\\n                trader,\\r\\n                optionAddress,\\r\\n                otherTokenAddress,\\r\\n                liquidity,\\r\\n                amountAMin,\\r\\n                amountBMin,\\r\\n                to,\\r\\n                deadline\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // ==== Callback Implementation ====\\r\\n\\r\\n    ///\\r\\n    /// @dev The callback function triggered in a UniswapV2Pair.swap() call when the `data` parameter has data.\\r\\n    /// @param sender The original msg.sender of the UniswapV2Pair.swap() call.\\r\\n    /// @param amount0 The quantity of token0 received to the `to` address in the swap() call.\\r\\n    /// @param amount1 The quantity of token1 received to the `to` address in the swap() call.\\r\\n    /// @param data The payload passed in the `data` parameter of the swap() call.\\r\\n    ///\\r\\n    function uniswapV2Call(\\r\\n        address sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bytes calldata data\\r\\n    ) external override {\\r\\n        address token0 = IUniswapV2Pair(msg.sender).token0();\\r\\n        address token1 = IUniswapV2Pair(msg.sender).token1();\\r\\n        assert(msg.sender == factory.getPair(token0, token1)); /// ensure that msg.sender is actually a V2 pair\\r\\n        (bool success, bytes memory returnData) = address(this).call(data);\\r\\n        require(\\r\\n            success &&\\r\\n                (returnData.length == 0 || abi.decode(returnData, (bool))),\\r\\n            \\\"ERR_UNISWAPV2_CALL_FAIL\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // ==== Management Functions ====\\r\\n\\r\\n    /// @dev Creates a UniswapV2Pair by calling `createPair` on the UniswapV2Factory.\\r\\n    function deployUniswapMarket(address optionAddress, address otherToken)\\r\\n        external\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        address uniswapPair = factory.createPair(optionAddress, otherToken);\\r\\n        return uniswapPair;\\r\\n    }\\r\\n\\r\\n    // ==== View ====\\r\\n\\r\\n    /// @dev Gets a UniswapV2Pair address for two tokens by calling the UniswapV2Factory.\\r\\n    function getUniswapMarketForTokens(address token0, address token1)\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        address uniswapPair = factory.getPair(token0, token1);\\r\\n        require(uniswapPair != address(0x0), \\\"ERR_PAIR_DOES_NOT_EXIST\\\");\\r\\n        return uniswapPair;\\r\\n    }\\r\\n\\r\\n    /// @dev Gets the name of the contract.\\r\\n    function getName() external override pure returns (string memory) {\\r\\n        return \\\"PrimitiveV1UniswapConnector03\\\";\\r\\n    }\\r\\n\\r\\n    /// @dev Gets the version of the contract.\\r\\n    function getVersion() external override pure returns (uint8) {\\r\\n        return uint8(3);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf2e00703e6d4bf958c10b30065264b8d4a2892a1fd90732eecda49d34f960c20\"},\"contracts/interfaces/IUniswapConnector03.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.2;\\r\\n\\r\\nimport {\\r\\n    IUniswapV2Router02\\r\\n} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport {\\r\\n    IUniswapV2Factory\\r\\n} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport { ITrader } from \\\"@primitivefi/contracts/contracts/option/interfaces/ITrader.sol\\\";\\r\\nimport { IOption, IERC20 } from \\\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\\\";\\r\\n\\r\\ninterface IUniswapConnector03 {\\r\\n    // ==== Combo Operations ====\\r\\n\\r\\n    function mintShortOptionsThenSwapToTokens(\\r\\n        IOption optionToken,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (bool);\\r\\n\\r\\n    // ==== Flash Functions ====\\r\\n\\r\\n    function flashCloseLongOptionsThenSwap(\\r\\n        address pairAddress,\\r\\n        address optionAddress,\\r\\n        uint256 flashLoanQuantity,\\r\\n        uint256 minPayout,\\r\\n        address[] calldata path,\\r\\n        address to\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function flashMintShortOptionsThenSwap(\\r\\n        address pairAddress,\\r\\n        address optionAddress,\\r\\n        uint256 flashLoanQuantity,\\r\\n        uint256 maxPremium,\\r\\n        address[] calldata path,\\r\\n        address to\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function openFlashLong(\\r\\n        IOption optionToken,\\r\\n        uint256 amountOptions,\\r\\n        uint256 amountOutMin\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function closeFlashLong(\\r\\n        IOption optionToken,\\r\\n        uint256 amountRedeems,\\r\\n        uint256 minPayout\\r\\n    ) external returns (bool);\\r\\n\\r\\n    // ==== Liquidity Functions ====\\r\\n\\r\\n    function addShortLiquidityWithUnderlying(\\r\\n        address optionAddress,\\r\\n        uint256 quantityOptions,\\r\\n        uint256 amountBMax,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function removeShortLiquidityThenCloseOptions(\\r\\n        address optionAddress,\\r\\n        address otherTokenAddress,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    // ==== Management Functions ====\\r\\n\\r\\n    function deployUniswapMarket(address optionAddress, address otherToken)\\r\\n        external\\r\\n        returns (address);\\r\\n\\r\\n    // ==== View ====\\r\\n\\r\\n    function getUniswapMarketForTokens(address token0, address token1)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    function router() external view returns (IUniswapV2Router02);\\r\\n\\r\\n    function factory() external view returns (IUniswapV2Factory);\\r\\n\\r\\n    function trader() external view returns (ITrader);\\r\\n\\r\\n    function getName() external pure returns (string memory);\\r\\n\\r\\n    function getVersion() external pure returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xf09e1cd4d36d06cb212797cd4d74c9bc1fb20085ef2015a26dd9e4d63d91dc72\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x63dce39ab69c513fb54459362900e4084a2ad2d164be2d46061afec61b956bfc\"},\"contracts/interfaces/IWethConnector01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n// Primitive\\r\\nimport { IOption } from \\\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\\\";\\r\\nimport { IWETH } from \\\"./IWETH.sol\\\";\\r\\n\\r\\ninterface IWethConnector01 {\\r\\n    function weth() external view returns (IWETH);\\r\\n\\r\\n    function safeMintWithETH(IOption optionToken, address receiver)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function safeExerciseWithETH(IOption optionToken, address receiver)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function safeExerciseForETH(\\r\\n        IOption optionToken,\\r\\n        uint256 exerciseQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function safeRedeemForETH(\\r\\n        IOption optionToken,\\r\\n        uint256 redeemQuantity,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function safeCloseForETH(\\r\\n        IOption optionToken,\\r\\n        uint256 closeQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function safeUnwindForETH(\\r\\n        IOption optionToken,\\r\\n        uint256 unwindQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function getName() external pure returns (string memory);\\r\\n\\r\\n    function getVersion() external pure returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x8600307089f1a5b6b1aedee2d6faeb636f8c5d9ae25b25b2087b236e7dbc8892\"},\"contracts/libraries/UniswapConnectorLib03.sol\":{\"content\":\"pragma solidity 0.6.2;\\r\\n\\r\\n///\\r\\n/// @title   Library for business logic for connecting Uniswap V2 Protocol functions with Primitive V1.\\r\\n/// @notice  Primitive V1 UniswapConnectorLib03 - @primitivefi/contracts@v0.4.2\\r\\n/// @author  Primitive\\r\\n///\\r\\n\\r\\n// Uniswap\\r\\nimport {\\r\\n    IUniswapV2Callee\\r\\n} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\\\";\\r\\nimport {\\r\\n    IUniswapV2Router02\\r\\n} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport {\\r\\n    IUniswapV2Factory\\r\\n} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport {\\r\\n    IUniswapV2Pair\\r\\n} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\n// Primitive\\r\\nimport { ITrader, IOption } from \\\"@primitivefi/contracts/contracts/option/interfaces/ITrader.sol\\\";\\r\\nimport { TraderLib, IERC20 } from \\\"@primitivefi/contracts/contracts/option/libraries/TraderLib.sol\\\";\\r\\nimport { IWethConnector01, IWETH } from \\\"../interfaces/IWethConnector01.sol\\\";\\r\\nimport { WethConnectorLib01 } from \\\"./WethConnectorLib01.sol\\\";\\r\\n// Open Zeppelin\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary UniswapConnectorLib03 {\\r\\n    using SafeERC20 for IERC20; // Reverts when `transfer` or `transferFrom` erc20 calls don't return proper data\\r\\n    using SafeMath for uint256; // Reverts on math underflows/overflows\\r\\n\\r\\n    /// ==== Combo Operations ====\\r\\n\\r\\n    ///\\r\\n    /// @dev Mints long + short option tokens, then swaps the shortOptionTokens (redeem) for tokens.\\r\\n    /// @notice If the first address in the path is not the shortOptionToken address, the tx will fail.\\r\\n    /// underlyingToken -> shortOptionToken -> quoteToken.\\r\\n    /// IMPORTANT: redeemTokens = shortOptionTokens\\r\\n    /// @param optionToken The address of the Option contract.\\r\\n    /// @param amountIn The quantity of options to mint.\\r\\n    /// @param amountOutMin The minimum quantity of tokens to receive in exchange for the shortOptionTokens.\\r\\n    /// @param path The token addresses to trade through using their Uniswap V2 pools. Assumes path[0] = shortOptionToken.\\r\\n    /// @param to The address to send the shortOptionToken proceeds and longOptionTokens to.\\r\\n    /// @param deadline The timestamp for a trade to fail at if not successful.\\r\\n    /// @return bool Whether the transaction was successful or not.\\r\\n    ///\\r\\n    function mintShortOptionsThenSwapToTokens(\\r\\n        IUniswapV2Router02 router,\\r\\n        IOption optionToken,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] memory path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) internal returns (bool) {\\r\\n        // Pulls underlyingTokens from msg.sender, then pushes underlyingTokens to option contract.\\r\\n        // Mints long + short tokens to this contract.\\r\\n        (uint256 outputOptions, uint256 outputRedeems) = TraderLib.safeMint(\\r\\n            optionToken,\\r\\n            amountIn,\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        // Swaps shortOptionTokens to the token specified at the end of the path, then sends to msg.sender.\\r\\n        // Reverts if the first address in the path is not the shortOptionToken address.\\r\\n        address redeemToken = optionToken.redeemToken();\\r\\n        (, bool success) = _swapExactOptionsForTokens(\\r\\n            router,\\r\\n            redeemToken,\\r\\n            outputRedeems, // shortOptionTokens = redeemTokens\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n        // Fail early if the swap failed.\\r\\n        require(success, \\\"ERR_SWAP_FAILED\\\");\\r\\n\\r\\n        // Send longOptionTokens to the \\\"to\\\" address.\\r\\n        IERC20(optionToken).safeTransfer(to, outputOptions); // longOptionTokens\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    // ==== Flash Functions ====\\r\\n\\r\\n    ///\\r\\n    /// @dev Receives underlyingTokens from a UniswapV2Pair.swap() call from a pair with\\r\\n    /// reserve0 = shortOptionTokens and reserve1 = underlyingTokens.\\r\\n    /// Uses underlyingTokens to mint long (option) + short (redeem) tokens.\\r\\n    /// Sends longOptionTokens to msg.sender, and pays back the UniswapV2Pair the shortOptionTokens,\\r\\n    /// AND any remainder quantity of underlyingTokens (paid by msg.sender).\\r\\n    /// @notice If the first address in the path is not the shortOptionToken address, the tx will fail.\\r\\n    /// @param router The address of the UniswapV2Router02 contract.\\r\\n    /// @param pairAddress The address of the redeemToken<>underlyingToken UniswapV2Pair contract.\\r\\n    /// @param optionAddress The address of the Option contract.\\r\\n    /// @param flashLoanQuantity The quantity of options to mint using borrowed underlyingTokens.\\r\\n    /// @param maxPremium The maximum quantity of underlyingTokens to pay for the optionTokens.\\r\\n    /// @param path The token addresses to trade through using their Uniswap V2 pools. Assumes path[0] = shortOptionToken.\\r\\n    /// @param to The address to send the shortOptionToken proceeds and longOptionTokens to.\\r\\n    /// @return success bool Whether the transaction was successful or not.\\r\\n    ///\\r\\n    function flashMintShortOptionsThenSwap(\\r\\n        IUniswapV2Router02 router,\\r\\n        address pairAddress,\\r\\n        address optionAddress,\\r\\n        uint256 flashLoanQuantity,\\r\\n        uint256 maxPremium,\\r\\n        address[] memory path,\\r\\n        address to\\r\\n    ) internal returns (uint256, uint256) {\\r\\n        require(msg.sender == address(this), \\\"ERR_NOT_SELF\\\");\\r\\n        require(flashLoanQuantity > 0, \\\"ERR_ZERO\\\");\\r\\n        // IMPORTANT: Assume this contract has already received `flashLoanQuantity` of underlyingTokens.\\r\\n        // We are flash swapping from an underlying <> shortOptionToken pair, paying back a portion using minted shortOptionTokens\\r\\n        // and any remainder of underlyingToken.\\r\\n\\r\\n        uint256 outputOptions; // quantity of longOptionTokens minted\\r\\n        uint256 outputRedeems; // quantity of shortOptionTokens minted\\r\\n\\r\\n        address underlyingToken = IOption(optionAddress)\\r\\n            .getUnderlyingTokenAddress();\\r\\n        require(path[1] == underlyingToken, \\\"ERR_END_PATH_NOT_UNDERLYING\\\");\\r\\n\\r\\n        // Mint longOptionTokens using the underlyingTokens received from UniswapV2 flash swap to this contract.\\r\\n        // Send underlyingTokens from this contract to the optionToken contract, then call mintOptions.\\r\\n        IERC20(underlyingToken).safeTransfer(optionAddress, flashLoanQuantity);\\r\\n        (outputOptions, outputRedeems) = IOption(optionAddress).mintOptions(\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        // The loanRemainder will be the amount of underlyingTokens that are needed from the original\\r\\n        // transaction caller in order to pay the flash swap.\\r\\n        // IMPORTANT: THIS IS EFFECTIVELY THE PREMIUM PAID IN UNDERLYINGTOKENS TO PURCHASE THE OPTIONTOKEN.\\r\\n        uint256 loanRemainder;\\r\\n\\r\\n        // Economically, negativePremiumPaymentInRedeems value should always be 0.\\r\\n        // In the case that we minted more redeemTokens than are needed to pay back the flash swap,\\r\\n        // (short -> underlying is a positive trade), there is an effective negative premium.\\r\\n        // In that case, this function will send out `negativePremiumAmount` of redeemTokens to the original caller.\\r\\n        // This means the user gets to keep the extra redeemTokens for free.\\r\\n        // Negative premium amount is the opposite difference of the loan remainder: (paid - flash loan amount)\\r\\n        uint256 negativePremiumPaymentInRedeems;\\r\\n\\r\\n        // Need to return tokens from the flash swap by returning shortOptionTokens and any remainder of underlyingTokens.\\r\\n        {\\r\\n            // scope for router, avoids stack too deep errors\\r\\n            IUniswapV2Router02 router_ = router;\\r\\n            // Since the borrowed amount is underlyingTokens, and we are paying back in redeemTokens,\\r\\n            // we need to see how much redeemTokens must be returned for the borrowed amount.\\r\\n            // We can find that value by doing the normal swap math, getAmountsIn will give us the amount\\r\\n            // of redeemTokens are needed for the output amount of the flash loan.\\r\\n            // IMPORTANT: amountsIn 0 is how many short tokens we need to pay back.\\r\\n            // This value is most likely greater than the amount of redeemTokens minted.\\r\\n            uint256[] memory amountsIn = router_.getAmountsIn(\\r\\n                flashLoanQuantity,\\r\\n                path\\r\\n            );\\r\\n\\r\\n            uint256 redeemsRequired = amountsIn[0]; // the amountIn of redeemTokens based on the amountOut of flashloanQuantity\\r\\n            // If outputRedeems is greater than redeems required, we have a negative premium.\\r\\n            uint256 redeemCostRemaining = redeemsRequired > outputRedeems\\r\\n                ? redeemsRequired.sub(outputRedeems)\\r\\n                : 0;\\r\\n            // If there is a negative premium, calculate the quantity extra redeemTokens.\\r\\n            negativePremiumPaymentInRedeems = outputRedeems > redeemsRequired\\r\\n                ? outputRedeems.sub(redeemsRequired)\\r\\n                : 0;\\r\\n\\r\\n            // In most cases, there will be an outstanding cost (assuming we minted less redeemTokens than the\\r\\n            // required amountIn of redeemTokens for the swap).\\r\\n            if (redeemCostRemaining > 0) {\\r\\n                // The user won't want to pay back the remaining cost in redeemTokens,\\r\\n                // because they borrowed underlyingTokens to mint them in the first place.\\r\\n                // So instead, we get the quantity of underlyingTokens that could be paid instead.\\r\\n                // We can calculate this using normal swap math.\\r\\n                // getAmountsOut will return the quantity of underlyingTokens that are output,\\r\\n                // based on some input of redeemTokens.\\r\\n                // The input redeemTokens is the remaining redeemToken cost, and the output\\r\\n                // underlyingTokens is the proportional amount of underlyingTokens.\\r\\n                // amountsOut[1] is then the outstanding flash loan value denominated in underlyingTokens.\\r\\n                address[] memory path_ = path;\\r\\n                uint256[] memory amountsOut = router_.getAmountsOut(\\r\\n                    redeemCostRemaining,\\r\\n                    path_\\r\\n                );\\r\\n\\r\\n                // should investigate further, needs to consider a 0.101% fee?\\r\\n                // Without a 0.101% fee, amountsOut[1] is not enough.\\r\\n                loanRemainder = amountsOut[1]\\r\\n                    .mul(100101)\\r\\n                    .add(amountsOut[1])\\r\\n                    .div(100000);\\r\\n            }\\r\\n\\r\\n            // In the case that more redeemTokens were minted than need to be sent back as payment,\\r\\n            // calculate the new outputRedeem value to send to the pair\\r\\n            // (don't send all the minted redeemTokens).\\r\\n            if (negativePremiumPaymentInRedeems > 0) {\\r\\n                outputRedeems = outputRedeems.sub(\\r\\n                    negativePremiumPaymentInRedeems\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        address redeemToken = IOption(optionAddress).redeemToken();\\r\\n        // Pay back the pair in redeemTokens (shortOptionTokens)\\r\\n        IERC20(redeemToken).safeTransfer(pairAddress, outputRedeems);\\r\\n\\r\\n        // If loanRemainder is non-zero and non-negative, send underlyingTokens to the pair as payment (premium).\\r\\n        if (loanRemainder > 0) {\\r\\n            // Pull underlyingTokens from the original msg.sender to pay the remainder of the flash swap.\\r\\n            require(maxPremium >= loanRemainder, \\\"ERR_PREMIUM_OVER_MAX\\\");\\r\\n            IERC20(underlyingToken).safeTransferFrom(\\r\\n                to,\\r\\n                pairAddress,\\r\\n                loanRemainder\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // If negativePremiumAmount is non-zero and non-negative, send it to the `to` address.\\r\\n        if (negativePremiumPaymentInRedeems > 0) {\\r\\n            IERC20(redeemToken).safeTransfer(\\r\\n                to,\\r\\n                negativePremiumPaymentInRedeems\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Send longOptionTokens (option) to the original msg.sender.\\r\\n        IERC20(optionAddress).safeTransfer(to, outputOptions);\\r\\n        return (outputOptions, loanRemainder);\\r\\n    }\\r\\n\\r\\n    /// @dev Sends shortOptionTokens to msg.sender, and pays back the UniswapV2Pair in underlyingTokens.\\r\\n    /// @notice IMPORTANT: If minPayout is 0, the `to` address is liable for negative payouts *if* that occurs.\\r\\n    /// @param router The UniswapV2Router02 contract.\\r\\n    /// @param pairAddress The address of the redeemToken<>underlyingToken UniswapV2Pair contract.\\r\\n    /// @param optionAddress The address of the longOptionTokes to close.\\r\\n    /// @param flashLoanQuantity The quantity of shortOptionTokens borrowed to use to close longOptionTokens.\\r\\n    /// @param minPayout The minimum payout of underlyingTokens sent to the `to` address.\\r\\n    /// @param path underlyingTokens -> shortOptionTokens, because we are paying the input of underlyingTokens.\\r\\n    /// @param to The address which is sent the underlyingToken payout, or liable to pay for a negative payout.\\r\\n    function flashCloseLongOptionsThenSwap(\\r\\n        IUniswapV2Router02 router,\\r\\n        address pairAddress,\\r\\n        address optionAddress,\\r\\n        uint256 flashLoanQuantity,\\r\\n        uint256 minPayout,\\r\\n        address[] memory path,\\r\\n        address to\\r\\n    ) internal returns (uint256, uint256) {\\r\\n        require(msg.sender == address(this), \\\"ERR_NOT_SELF\\\");\\r\\n        require(flashLoanQuantity > 0, \\\"ERR_ZERO\\\");\\r\\n        // IMPORTANT: Assume this contract has already received `flashLoanQuantity` of redeemTokens.\\r\\n        // We are flash swapping from an underlying <> shortOptionToken pair,\\r\\n        // paying back a portion using underlyingTokens received from closing options.\\r\\n        // In the flash open, we did redeemTokens to underlyingTokens.\\r\\n        // In the flash close (this function), we are doing underlyingTokens to redeemTokens and keeping the remainder.\\r\\n\\r\\n        address underlyingToken = IOption(optionAddress)\\r\\n            .getUnderlyingTokenAddress();\\r\\n        address redeemToken = IOption(optionAddress).redeemToken();\\r\\n        require(path[1] == redeemToken, \\\"ERR_END_PATH_NOT_REDEEM\\\");\\r\\n\\r\\n        // Close longOptionTokens using the redeemTokens received from UniswapV2 flash swap to this contract.\\r\\n        // Send underlyingTokens from this contract to the optionToken contract, then call mintOptions.\\r\\n        IERC20(redeemToken).safeTransfer(optionAddress, flashLoanQuantity);\\r\\n        uint256 requiredOptions = flashLoanQuantity\\r\\n            .mul(IOption(optionAddress).getBaseValue())\\r\\n            .div(IOption(optionAddress).getQuoteValue());\\r\\n\\r\\n        // Send out the required amount of options from the original caller.\\r\\n        // WARNING: CALLS TO UNTRUSTED ADDRESS.\\r\\n        IERC20(optionAddress).safeTransferFrom(\\r\\n            to,\\r\\n            optionAddress,\\r\\n            requiredOptions\\r\\n        );\\r\\n        (, , uint256 outputUnderlyings) = IOption(optionAddress).closeOptions(\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        // The loanRemainder will be the amount of underlyingTokens that are needed from the original\\r\\n        // transaction caller in order to pay the flash swap.\\r\\n        // IMPORTANT: THIS IS EFFECTIVELY THE PREMIUM PAID IN UNDERLYINGTOKENS TO PURCHASE THE OPTIONTOKEN.\\r\\n        uint256 loanRemainder;\\r\\n\\r\\n        // Economically, underlyingPayout value should always be greater than 0, or this trade shouldn't be made.\\r\\n        // If an underlyingPayout is greater than 0, it means that the redeemTokens borrowed are worth less than the\\r\\n        // underlyingTokens received from closing the redeemToken<>optionTokens.\\r\\n        // If the redeemTokens are worth more than the underlyingTokens they are entitled to,\\r\\n        // then closing the redeemTokens will cost additional underlyingTokens. In this case,\\r\\n        // the transaction should be reverted. Or else, the user is paying extra at the expense of\\r\\n        // rebalancing the pool.\\r\\n        uint256 underlyingPayout;\\r\\n\\r\\n        // Need to return tokens from the flash swap by returning underlyingTokens.\\r\\n        {\\r\\n            // scope for router, avoids stack too deep errors\\r\\n            IUniswapV2Router02 router_ = router;\\r\\n\\r\\n            // Since the borrowed amount is redeemTokens, and we are paying back in underlyingTokens,\\r\\n            // we need to see how much underlyingTokens must be returned for the borrowed amount.\\r\\n            // We can find that value by doing the normal swap math, getAmountsIn will give us the amount\\r\\n            // of underlyingTokens are needed for the output amount of the flash loan.\\r\\n            // IMPORTANT: amountsIn 0 is how many underlyingTokens we need to pay back.\\r\\n            // This value is most likely greater than the amount of underlyingTokens received from closing.\\r\\n            uint256[] memory amountsIn = router_.getAmountsIn(\\r\\n                flashLoanQuantity,\\r\\n                path\\r\\n            );\\r\\n\\r\\n            uint256 underlyingsRequired = amountsIn[0]; // the amountIn required of underlyingTokens based on the amountOut of flashloanQuantity\\r\\n            // If outputUnderlyings (received from closing) is greater than underlyings required,\\r\\n            // there is a positive payout.\\r\\n            underlyingPayout = outputUnderlyings > underlyingsRequired\\r\\n                ? outputUnderlyings.sub(underlyingsRequired)\\r\\n                : 0;\\r\\n\\r\\n            // If there is a negative payout, calculate the remaining cost of underlyingTokens.\\r\\n            uint256 underlyingCostRemaining = underlyingsRequired >\\r\\n                outputUnderlyings\\r\\n                ? underlyingsRequired.sub(outputUnderlyings)\\r\\n                : 0;\\r\\n\\r\\n            // In the case that there is a negative payout (additional underlyingTokens are required),\\r\\n            // get the remaining cost into the `loanRemainder` variable and also check to see\\r\\n            // if a user is willing to pay the negative cost. There is no rational economic incentive for this.\\r\\n            if (underlyingCostRemaining > 0) {\\r\\n                loanRemainder = underlyingCostRemaining;\\r\\n            }\\r\\n\\r\\n            // In the case that the payment is positive, subtract it from the outputUnderlyings.\\r\\n            // outputUnderlyings = underlyingsRequired, which is being paid back to the pair.\\r\\n            if (underlyingPayout > 0) {\\r\\n                outputUnderlyings = outputUnderlyings.sub(underlyingPayout);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Pay back the pair in underlyingTokens\\r\\n        IERC20(underlyingToken).safeTransfer(pairAddress, outputUnderlyings);\\r\\n\\r\\n        // If loanRemainder is non-zero and non-negative, send underlyingTokens to the pair as payment (premium).\\r\\n        if (loanRemainder > 0) {\\r\\n            // Pull underlyingTokens from the original msg.sender to pay the remainder of the flash swap.\\r\\n            // Revert if the minPayout is less than or equal to the underlyingPayment of 0.\\r\\n            // There is 0 underlyingPayment in the case that loanRemainder > 0.\\r\\n            // This code branch can be successful by setting `minPayout` to 0.\\r\\n            // This means the user is willing to pay to close the position.\\r\\n            require(minPayout <= underlyingPayout, \\\"ERR_NEGATIVE_PAYOUT\\\");\\r\\n            IERC20(underlyingToken).safeTransferFrom(\\r\\n                to,\\r\\n                pairAddress,\\r\\n                loanRemainder\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // If underlyingPayout is non-zero and non-negative, send it to the `to` address.\\r\\n        if (underlyingPayout > 0) {\\r\\n            // Revert if minPayout is less than the actual payout.\\r\\n            require(underlyingPayout >= minPayout, \\\"ERR_PREMIUM_UNDER_MIN\\\");\\r\\n            IERC20(underlyingToken).safeTransfer(to, underlyingPayout);\\r\\n        }\\r\\n\\r\\n        return (outputUnderlyings, underlyingPayout);\\r\\n    }\\r\\n\\r\\n    // ==== Liquidity Functions ====\\r\\n\\r\\n    ///\\r\\n    /// @dev Adds redeemToken liquidity to a redeem<>otherToken pair by minting shortOptionTokens with underlyingTokens.\\r\\n    /// @notice Pulls underlying tokens from msg.sender and pushes UNI-V2 liquidity tokens to the \\\"to\\\" address.\\r\\n    /// underlyingToken -> redeemToken -> UNI-V2.\\r\\n    /// @param optionAddress The address of the optionToken to get the redeemToken to mint then provide liquidity for.\\r\\n    /// @param quantityOptions The quantity of underlyingTokens to use to mint option + redeem tokens.\\r\\n    /// @param amountBMax The quantity of underlyingTokens to add with shortOptionTokens to the Uniswap V2 Pair.\\r\\n    /// @param amountBMin The minimum quantity of underlyingTokens expected to provide liquidity with.\\r\\n    /// @param to The address that receives UNI-V2 shares.\\r\\n    /// @param deadline The timestamp to expire a pending transaction.\\r\\n    ///\\r\\n    function addShortLiquidityWithUnderlying(\\r\\n        IUniswapV2Router02 router,\\r\\n        address optionAddress,\\r\\n        uint256 quantityOptions,\\r\\n        uint256 amountBMax,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        internal\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 amountA;\\r\\n        uint256 amountB;\\r\\n        uint256 liquidity;\\r\\n        uint256 outputRedeems;\\r\\n        {\\r\\n            IOption optionToken = IOption(optionAddress);\\r\\n            // Pulls underlyingTokens from msg.sender to this contract.\\r\\n            // Pushes underlyingTokens to option contract and mints option + redeem tokens to this contract.\\r\\n            // Warning: calls into msg.sender using `safeTransferFrom`. Msg.sender is not trusted.\\r\\n            (, outputRedeems) = TraderLib.safeMint(\\r\\n                optionToken,\\r\\n                quantityOptions,\\r\\n                address(this)\\r\\n            );\\r\\n            // Send longOptionTokens from minting option operation to msg.sender.\\r\\n            IERC20(address(optionToken)).safeTransfer(\\r\\n                msg.sender,\\r\\n                quantityOptions\\r\\n            );\\r\\n        }\\r\\n\\r\\n        {\\r\\n            IUniswapV2Router02 router_ = router;\\r\\n            // Scope for redeem and underlying, avoids stack too deep errors.\\r\\n            address redeemToken = IOption(optionAddress).redeemToken(); // gas savings\\r\\n            address underlyingToken = IOption(optionAddress)\\r\\n                .getUnderlyingTokenAddress();\\r\\n\\r\\n            uint256 amountBMax_ = amountBMax;\\r\\n            uint256 amountBMin_ = amountBMin;\\r\\n            address to_ = to;\\r\\n            uint256 deadline_ = deadline;\\r\\n            // Pull underlyingTokens from msg.sender to add to Uniswap V2 Pair.\\r\\n            // Warning: calls into msg.sender using `safeTransferFrom`. Msg.sender is not trusted.\\r\\n            IERC20(underlyingToken).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                amountBMax_\\r\\n            );\\r\\n            // Approves Uniswap V2 Pair to transfer option and underlying tokens from this contract.\\r\\n            IERC20(redeemToken).approve(address(router_), uint256(-1));\\r\\n            IERC20(underlyingToken).approve(address(router_), uint256(-1));\\r\\n\\r\\n            // Adds liquidity to Uniswap V2 Pair and returns liquidity shares to the \\\"to\\\" address.\\r\\n            (amountA, amountB, liquidity) = router_.addLiquidity(\\r\\n                redeemToken,\\r\\n                underlyingToken,\\r\\n                outputRedeems,\\r\\n                amountBMax_,\\r\\n                outputRedeems,\\r\\n                amountBMin_,\\r\\n                to_,\\r\\n                deadline_\\r\\n            );\\r\\n            assert(amountA == outputRedeems);\\r\\n        }\\r\\n\\r\\n        // Send any remaining underlying tokens back to msg.sender.\\r\\n        {\\r\\n            IOption optionToken = IOption(optionAddress);\\r\\n            uint256 remainder = amountBMax > amountB\\r\\n                ? amountBMax.sub(amountB)\\r\\n                : 0;\\r\\n            if (remainder > 0) {\\r\\n                IERC20(optionToken.getUnderlyingTokenAddress()).safeTransfer(\\r\\n                    msg.sender,\\r\\n                    remainder\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (amountA, amountB, liquidity);\\r\\n    }\\r\\n\\r\\n    ///\\r\\n    /// @dev Combines Uniswap V2 Router \\\"removeLiquidity\\\" function with Primitive \\\"closeOptions\\\" function.\\r\\n    /// @notice Pulls UNI-V2 liquidity shares with shortOption<>quote token, and optionTokens from msg.sender.\\r\\n    /// Then closes the longOptionTokens and withdraws underlyingTokens to the \\\"to\\\" address.\\r\\n    /// Sends quoteTokens from the burned UNI-V2 liquidity shares to the \\\"to\\\" address.\\r\\n    /// UNI-V2 -> optionToken -> underlyingToken.\\r\\n    /// @param optionAddress The address of the option that will be closed from burned UNI-V2 liquidity shares.\\r\\n    /// @param otherTokenAddress The address of the other token in the option pair.\\r\\n    /// @param liquidity The quantity of liquidity tokens to pull from msg.sender and burn.\\r\\n    /// @param amountAMin The minimum quantity of shortOptionTokens to receive from removing liquidity.\\r\\n    /// @param amountBMin The minimum quantity of quoteTokens to receive from removing liquidity.\\r\\n    /// @param to The address that receives quoteTokens from burned UNI-V2, and underlyingTokens from closed options.\\r\\n    /// @param deadline The timestamp to expire a pending transaction.\\r\\n    ///\\r\\n    function removeShortLiquidityThenCloseOptions(\\r\\n        IUniswapV2Factory factory,\\r\\n        IUniswapV2Router02 router,\\r\\n        ITrader trader,\\r\\n        address optionAddress,\\r\\n        address otherTokenAddress,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) internal returns (uint256, uint256) {\\r\\n        // Store in memory for gas savings.\\r\\n        address redeemToken = IOption(optionAddress).redeemToken();\\r\\n\\r\\n        {\\r\\n            // Gets the Uniswap V2 Pair address for shortOptionToken and otherTokens.\\r\\n            // Transfers the LP tokens for the pair to this contract.\\r\\n            // Warning: internal call to a non-trusted address `msg.sender`.\\r\\n            address pair = factory.getPair(redeemToken, otherTokenAddress);\\r\\n            IERC20(pair).safeTransferFrom(msg.sender, address(this), liquidity);\\r\\n            IERC20(pair).approve(address(router), uint256(-1));\\r\\n        }\\r\\n\\r\\n        // Remove liquidity from Uniswap V2 pool to receive pool tokens (shortOptionTokens + otherTokens).\\r\\n        (uint256 amountShortOptions, uint256 amountOtherTokens) = router\\r\\n            .removeLiquidity(\\r\\n            redeemToken,\\r\\n            otherTokenAddress,\\r\\n            liquidity,\\r\\n            amountAMin,\\r\\n            amountBMin,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        // Approves trader to pull longOptionTokens and shortOptionTOkens from this contract to close options.\\r\\n        {\\r\\n            IOption optionToken = IOption(optionAddress);\\r\\n            IERC20(address(optionToken)).approve(address(trader), uint256(-1));\\r\\n            IERC20(redeemToken).approve(address(trader), uint256(-1));\\r\\n\\r\\n            // Calculate equivalent quantity of redeem (short option) tokens to close the option position.\\r\\n            // Need to cancel base units and have quote units remaining.\\r\\n            uint256 requiredLongOptionTokens = amountShortOptions\\r\\n                .mul(optionToken.getBaseValue())\\r\\n                .mul(1 ether)\\r\\n                .div(optionToken.getQuoteValue())\\r\\n                .div(1 ether);\\r\\n\\r\\n            // Pull the required longOptionTokens from msg.sender to this contract.\\r\\n            IERC20(address(optionToken)).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                requiredLongOptionTokens\\r\\n            );\\r\\n            // Pushes option and redeem tokens to the option contract and calls \\\"closeOption\\\".\\r\\n            // Receives underlyingTokens and sends them to the \\\"to\\\" address.\\r\\n            trader.safeClose(optionToken, requiredLongOptionTokens, to);\\r\\n        }\\r\\n\\r\\n        // Send the otherTokens received from burning liquidity shares to the \\\"to\\\" address.\\r\\n        IERC20(otherTokenAddress).safeTransfer(to, amountOtherTokens);\\r\\n        return (amountShortOptions, amountOtherTokens);\\r\\n    }\\r\\n\\r\\n    // ==== Internal Functions ====\\r\\n\\r\\n    ///\\r\\n    /// @dev Calls the \\\"swapExactTokensForTokens\\\" function on the Uniswap V2 Router 02 Contract.\\r\\n    /// @notice Fails early if the address in the beginning of the path is not the token address.\\r\\n    /// @param tokenAddress The address of the token to swap from.\\r\\n    /// @param amountIn The quantity of longOptionTokens to swap with.\\r\\n    /// @param amountOutMin The minimum quantity of tokens to receive in exchange for the tokens swapped.\\r\\n    /// @param path The token addresses to trade through using their Uniswap V2 pairs.\\r\\n    /// @param to The address to send the token proceeds to.\\r\\n    /// @param deadline The timestamp for a trade to fail at if not successful.\\r\\n    ///\\r\\n    function _swapExactOptionsForTokens(\\r\\n        IUniswapV2Router02 router,\\r\\n        address tokenAddress,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] memory path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) internal returns (uint256[] memory amounts, bool success) {\\r\\n        // Fails early if the token being swapped from is not the optionToken.\\r\\n        require(path[0] == tokenAddress, \\\"ERR_PATH_OPTION_START\\\");\\r\\n\\r\\n        // Approve the uniswap router to be able to transfer longOptionTokens from this contract.\\r\\n        IERC20(tokenAddress).approve(address(router), uint256(-1));\\r\\n        // Call the Uniswap V2 function to swap longOptionTokens to quoteTokens.\\r\\n        (amounts) = router.swapExactTokensForTokens(\\r\\n            amountIn,\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n        success = true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x09cdaa428c71e614fa28ee1748ea69999c2faa1c09bda4ae7b4d9e271fdd5c24\"},\"contracts/libraries/WethConnectorLib01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.2;\\r\\n\\r\\n///\\r\\n/// @title   Weth Connector for bridging ether to WETH Primitive options.\\r\\n/// @notice  Abstracts the interfacing with the protocol's option contract for ease-of-use.\\r\\n///          Manages operations involving options with WETH as the underlying or strike asset.\\r\\n///          Accepts deposits in ethers and withdraws ethers.\\r\\n///          Primitive V1 WethConnectorLib01 - @primitivefi/contracts@v0.4.1\\r\\n/// @author  Primitive\\r\\n///\\r\\n\\r\\n// WETH Interface\\r\\nimport { IWETH } from \\\"../interfaces/IWETH.sol\\\";\\r\\n// Primitive\\r\\nimport { IOption, IERC20 } from \\\"@primitivefi/contracts/contracts/option/interfaces/IOption.sol\\\";\\r\\n// Open Zeppelin\\r\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary WethConnectorLib01 {\\r\\n    using SafeERC20 for IERC20; // Reverts when `transfer` or `transferFrom` erc20 calls don't return proper data\\r\\n    using SafeMath for uint256; // Reverts on math underflows/overflows\\r\\n\\r\\n    ///\\r\\n    /// @dev Checks the quantity of an operation to make sure its not zero. Fails early.\\r\\n    ///\\r\\n    modifier nonZero(uint256 quantity) {\\r\\n        require(quantity > 0, \\\"ERR_ZERO\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ==== Operation Functions ====\\r\\n\\r\\n    ///\\r\\n    ///@dev Mints msg.value quantity of options and \\\"quote\\\" (option parameter) quantity of redeem tokens.\\r\\n    ///@notice This function is for options that have WETH as the underlying asset.\\r\\n    ///@param optionToken The address of the option token to mint.\\r\\n    ///@param receiver The address which receives the minted option and redeem tokens.\\r\\n    ///\\r\\n    function safeMintWithETH(\\r\\n        IWETH weth,\\r\\n        IOption optionToken,\\r\\n        address receiver\\r\\n    ) internal nonZero(msg.value) returns (uint256, uint256) {\\r\\n        // Check to make sure we are minting a WETH call option.\\r\\n        address underlyingAddress = optionToken.getUnderlyingTokenAddress();\\r\\n        require(address(weth) == underlyingAddress, \\\"ERR_NOT_WETH\\\");\\r\\n\\r\\n        // Convert ethers into WETH, then send WETH to option contract in preparation of calling mintOptions().\\r\\n        _depositEthSendWeth(weth, address(optionToken));\\r\\n\\r\\n        // Mint the option and redeem tokens.\\r\\n        (uint256 outputOptions, uint256 outputRedeems) = optionToken\\r\\n            .mintOptions(receiver);\\r\\n\\r\\n        return (outputOptions, outputRedeems);\\r\\n    }\\r\\n\\r\\n    ///\\r\\n    /// @dev Swaps msg.value of strikeTokens (ethers) to underlyingTokens.\\r\\n    /// Uses the strike ratio as the exchange rate. Strike ratio = base / quote.\\r\\n    /// Msg.value (quote units) * base / quote = base units (underlyingTokens) to withdraw.\\r\\n    /// @notice This function is for options with WETH as the strike asset.\\r\\n    /// Burns option tokens, accepts ethers, and pushes out underlyingTokens.\\r\\n    /// @param optionToken The address of the option contract.\\r\\n    /// @param receiver The underlyingTokens are sent to the receiver address.\\r\\n    ///\\r\\n    function safeExerciseWithETH(\\r\\n        IWETH weth,\\r\\n        IOption optionToken,\\r\\n        address receiver\\r\\n    ) internal nonZero(msg.value) returns (uint256, uint256) {\\r\\n        // Require one of the option's assets to be WETH.\\r\\n        address strikeAddress = optionToken.getStrikeTokenAddress();\\r\\n        require(strikeAddress == address(weth), \\\"ERR_NOT_WETH\\\");\\r\\n\\r\\n        uint256 inputStrikes = msg.value;\\r\\n        // Calculate quantity of optionTokens needed to burn.\\r\\n        // An ether put option with strike price $300 has a \\\"base\\\" value of 300, and a \\\"quote\\\" value of 1.\\r\\n        // To calculate how many options are needed to be burned, we need to cancel out the \\\"quote\\\" units.\\r\\n        // The input strike quantity can be multiplied by the strike ratio to cancel out \\\"quote\\\" units.\\r\\n        // 1 ether (quote units) * 300 (base units) / 1 (quote units) = 300 inputOptions\\r\\n        uint256 inputOptions = inputStrikes.mul(optionToken.getBaseValue()).div(\\r\\n            optionToken.getQuoteValue()\\r\\n        );\\r\\n\\r\\n        // Fail early if msg.sender does not have enough optionTokens to burn.\\r\\n        require(\\r\\n            IERC20(address(optionToken)).balanceOf(msg.sender) >= inputOptions,\\r\\n            \\\"ERR_BAL_OPTIONS\\\"\\r\\n        );\\r\\n\\r\\n        // Wrap the ethers into WETH, and send the WETH to the option contract to prepare for calling exerciseOptions().\\r\\n        _depositEthSendWeth(weth, address(optionToken));\\r\\n\\r\\n        // Send the option tokens required to prepare for calling exerciseOptions().\\r\\n        IERC20(address(optionToken)).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(optionToken),\\r\\n            inputOptions\\r\\n        );\\r\\n\\r\\n        // Burns the transferred option tokens, stores the strike asset (ether), and pushes underlyingTokens\\r\\n        // to the receiver address.\\r\\n        (inputStrikes, inputOptions) = optionToken.exerciseOptions(\\r\\n            receiver,\\r\\n            inputOptions,\\r\\n            new bytes(0)\\r\\n        );\\r\\n\\r\\n        return (inputStrikes, inputOptions);\\r\\n    }\\r\\n\\r\\n    ///\\r\\n    /// @dev Swaps strikeTokens to underlyingTokens, WETH, which is converted to ethers before withdrawn.\\r\\n    /// Uses the strike ratio as the exchange rate. Strike ratio = base / quote.\\r\\n    /// @notice This function is for options with WETH as the underlying asset.\\r\\n    /// Burns option tokens, pulls strikeTokens, and pushes out ethers.\\r\\n    /// @param optionToken The address of the option contract.\\r\\n    /// @param exerciseQuantity Quantity of optionTokens to exercise.\\r\\n    /// @param receiver The underlyingTokens (ethers) are sent to the receiver address.\\r\\n    ///\\r\\n    function safeExerciseForETH(\\r\\n        IWETH weth,\\r\\n        IOption optionToken,\\r\\n        uint256 exerciseQuantity,\\r\\n        address receiver\\r\\n    ) internal nonZero(exerciseQuantity) returns (uint256, uint256) {\\r\\n        // Require one of the option's assets to be WETH.\\r\\n        address underlyingAddress = optionToken.getUnderlyingTokenAddress();\\r\\n        address strikeAddress = optionToken.getStrikeTokenAddress();\\r\\n        require(underlyingAddress == address(weth), \\\"ERR_NOT_WETH\\\");\\r\\n\\r\\n        // Fails early if msg.sender does not have enough optionTokens.\\r\\n        require(\\r\\n            IERC20(address(optionToken)).balanceOf(msg.sender) >=\\r\\n                exerciseQuantity,\\r\\n            \\\"ERR_BAL_OPTIONS\\\"\\r\\n        );\\r\\n\\r\\n        // Calculate quantity of strikeTokens needed to exercise quantity of optionTokens.\\r\\n        uint256 inputStrikes = exerciseQuantity\\r\\n            .mul(optionToken.getQuoteValue())\\r\\n            .div(optionToken.getBaseValue());\\r\\n\\r\\n        // Fails early if msg.sender does not have enough strikeTokens.\\r\\n        require(\\r\\n            IERC20(strikeAddress).balanceOf(msg.sender) >= inputStrikes,\\r\\n            \\\"ERR_BAL_STRIKE\\\"\\r\\n        );\\r\\n\\r\\n        // Send strikeTokens to option contract to prepare for calling exerciseOptions().\\r\\n        IERC20(strikeAddress).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(optionToken),\\r\\n            inputStrikes\\r\\n        );\\r\\n\\r\\n        // Send the option tokens to prepare for calling exerciseOptions().\\r\\n        IERC20(address(optionToken)).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(optionToken),\\r\\n            exerciseQuantity\\r\\n        );\\r\\n\\r\\n        // Burns the optionTokens sent, stores the strikeTokens sent, and pushes underlyingTokens\\r\\n        // to this contract.\\r\\n        uint256 inputOptions;\\r\\n        (inputStrikes, inputOptions) = optionToken.exerciseOptions(\\r\\n            address(this),\\r\\n            exerciseQuantity,\\r\\n            new bytes(0)\\r\\n        );\\r\\n\\r\\n        // Converts the withdrawn WETH to ethers, then sends the ethers to the receiver address.\\r\\n        _withdrawEthAndSend(weth, receiver, exerciseQuantity);\\r\\n\\r\\n        return (inputStrikes, inputOptions);\\r\\n    }\\r\\n\\r\\n    ///\\r\\n    /// @dev Burns redeem tokens to withdraw strike tokens (ethers) at a 1:1 ratio.\\r\\n    /// @notice This function is for options that have WETH as the strike asset.\\r\\n    /// Converts WETH to ethers, and withdraws ethers to the receiver address.\\r\\n    /// @param optionToken The address of the option contract.\\r\\n    /// @param redeemQuantity The quantity of redeemTokens to burn.\\r\\n    /// @param receiver The strikeTokens (ethers) are sent to the receiver address.\\r\\n    ///\\r\\n    function safeRedeemForETH(\\r\\n        IWETH weth,\\r\\n        IOption optionToken,\\r\\n        uint256 redeemQuantity,\\r\\n        address receiver\\r\\n    ) internal nonZero(redeemQuantity) returns (uint256) {\\r\\n        // Require strikeToken to be WETH.\\r\\n        address strikeAddress = optionToken.getStrikeTokenAddress();\\r\\n        require(strikeAddress == address(weth), \\\"ERR_NOT_WETH\\\");\\r\\n\\r\\n        // Fail early if msg.sender does not have enough redeemTokens.\\r\\n        address redeemAddress = optionToken.redeemToken();\\r\\n        require(\\r\\n            IERC20(redeemAddress).balanceOf(msg.sender) >= redeemQuantity,\\r\\n            \\\"ERR_BAL_REDEEM\\\"\\r\\n        );\\r\\n\\r\\n        // Send redeemTokens to option contract in preparation for calling redeemStrikeTokens().\\r\\n        IERC20(redeemAddress).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(optionToken),\\r\\n            redeemQuantity\\r\\n        );\\r\\n\\r\\n        // If options have not been exercised, there will be no strikeTokens to redeem, causing a revert.\\r\\n        // Burns the redeem tokens that were sent to the contract, and withdraws the same quantity of WETH.\\r\\n        // Sends the withdrawn WETH to this contract, so that it can be unwrapped prior to being sent to receiver.\\r\\n        uint256 inputRedeems = optionToken.redeemStrikeTokens(address(this));\\r\\n\\r\\n        // Unwrap the redeemed WETH and then send the ethers to the receiver.\\r\\n        _withdrawEthAndSend(weth, receiver, redeemQuantity);\\r\\n\\r\\n        return inputRedeems;\\r\\n    }\\r\\n\\r\\n    ///\\r\\n    /// @dev Burn optionTokens and redeemTokens to withdraw underlyingTokens (ethers).\\r\\n    /// @notice This function is for options with WETH as the underlying asset.\\r\\n    /// WETH underlyingTokens are converted to ethers before being sent to receiver.\\r\\n    /// The redeemTokens to burn is equal to the optionTokens * strike ratio.\\r\\n    /// inputOptions = inputRedeems / strike ratio = outUnderlyings\\r\\n    /// @param optionToken The address of the option contract.\\r\\n    /// @param closeQuantity Quantity of optionTokens to burn and an input to calculate how many redeems to burn.\\r\\n    /// @param receiver The underlyingTokens (ethers) are sent to the receiver address.\\r\\n    ///\\r\\n    function safeCloseForETH(\\r\\n        IWETH weth,\\r\\n        IOption optionToken,\\r\\n        uint256 closeQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        internal\\r\\n        nonZero(closeQuantity)\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        // Require the optionToken to have WETH as the underlying asset.\\r\\n        address underlyingAddress = optionToken.getUnderlyingTokenAddress();\\r\\n        require(address(weth) == underlyingAddress, \\\"ERR_NOT_WETH\\\");\\r\\n\\r\\n        // Fail early if msg.sender does not have enough optionTokens to burn.\\r\\n        require(\\r\\n            IERC20(address(optionToken)).balanceOf(msg.sender) >= closeQuantity,\\r\\n            \\\"ERR_BAL_OPTIONS\\\"\\r\\n        );\\r\\n\\r\\n        // Calculate the quantity of redeemTokens that need to be burned.\\r\\n        uint256 inputRedeems = closeQuantity\\r\\n            .mul(optionToken.getQuoteValue())\\r\\n            .div(optionToken.getBaseValue());\\r\\n\\r\\n        // Fail early is msg.sender does not have enough redeemTokens to burn.\\r\\n        require(\\r\\n            IERC20(optionToken.redeemToken()).balanceOf(msg.sender) >=\\r\\n                inputRedeems,\\r\\n            \\\"ERR_BAL_REDEEM\\\"\\r\\n        );\\r\\n\\r\\n        // Send redeem and option tokens in preparation of calling closeOptions().\\r\\n        IERC20(optionToken.redeemToken()).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(optionToken),\\r\\n            inputRedeems\\r\\n        );\\r\\n        IERC20(address(optionToken)).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(optionToken),\\r\\n            closeQuantity\\r\\n        );\\r\\n\\r\\n        // Call the closeOptions() function to burn option and redeem tokens and withdraw underlyingTokens.\\r\\n        uint256 inputOptions;\\r\\n        uint256 outUnderlyings;\\r\\n        (inputRedeems, inputOptions, outUnderlyings) = optionToken.closeOptions(\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        // Since underlyngTokens are WETH, unwrap them then send the ethers to the receiver.\\r\\n        _withdrawEthAndSend(weth, receiver, closeQuantity);\\r\\n\\r\\n        return (inputRedeems, inputOptions, outUnderlyings);\\r\\n    }\\r\\n\\r\\n    ///\\r\\n    /// @dev Burn redeemTokens to withdraw underlyingTokens (ethers) from expired options.\\r\\n    /// This function is for options with WETH as the underlying asset.\\r\\n    /// The underlyingTokens are WETH, which are converted to ethers prior to being sent to receiver.\\r\\n    /// @param optionToken The address of the option contract.\\r\\n    /// @param unwindQuantity Quantity of underlyingTokens (ethers) to withdraw.\\r\\n    /// @param receiver The underlyingTokens (ethers) are sent to the receiver address.\\r\\n    ///\\r\\n    function safeUnwindForETH(\\r\\n        IWETH weth,\\r\\n        IOption optionToken,\\r\\n        uint256 unwindQuantity,\\r\\n        address receiver\\r\\n    )\\r\\n        internal\\r\\n        nonZero(unwindQuantity)\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        // Require the optionToken to have WETH as the underlying asset.\\r\\n        address underlyingAddress = optionToken.getUnderlyingTokenAddress();\\r\\n        require(address(weth) == underlyingAddress, \\\"ERR_NOT_WETH\\\");\\r\\n\\r\\n        // If the option is not expired, fail early.\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        require(optionToken.getExpiryTime() < now, \\\"ERR_NOT_EXPIRED\\\");\\r\\n\\r\\n        // Calculate the quantity of redeemTokens that need to be burned.\\r\\n        uint256 inputRedeems = unwindQuantity\\r\\n            .mul(optionToken.getQuoteValue())\\r\\n            .div(optionToken.getBaseValue());\\r\\n\\r\\n        // Fail early if msg.sender does not have enough redeemTokens to burn.\\r\\n        require(\\r\\n            IERC20(optionToken.redeemToken()).balanceOf(msg.sender) >=\\r\\n                inputRedeems,\\r\\n            \\\"ERR_BAL_REDEEM\\\"\\r\\n        );\\r\\n\\r\\n        // Send redeem in preparation of calling closeOptions().\\r\\n        IERC20(optionToken.redeemToken()).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(optionToken),\\r\\n            inputRedeems\\r\\n        );\\r\\n\\r\\n        // Call the closeOptions() function to burn redeem tokens and withdraw underlyingTokens.\\r\\n        uint256 inputOptions;\\r\\n        uint256 outUnderlyings;\\r\\n        (inputRedeems, inputOptions, outUnderlyings) = optionToken.closeOptions(\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        // Since underlyngTokens are WETH, unwrap them to ethers then send the ethers to the receiver.\\r\\n        _withdrawEthAndSend(weth, receiver, unwindQuantity);\\r\\n        return (inputRedeems, inputOptions, outUnderlyings);\\r\\n    }\\r\\n\\r\\n    // ==== WETH Operations ====\\r\\n\\r\\n    ///\\r\\n    /// @dev Deposits msg.value of ethers into WETH contract. Then sends WETH to \\\"to\\\".\\r\\n    /// @param to The address to send WETH ERC-20 tokens to.\\r\\n    ///\\r\\n    function _depositEthSendWeth(IWETH weth, address to) internal {\\r\\n        // Deposit the ethers received from msg.value into the WETH contract.\\r\\n        weth.deposit.value(msg.value)();\\r\\n\\r\\n        // Send WETH.\\r\\n        weth.transfer(to, msg.value);\\r\\n    }\\r\\n\\r\\n    ///\\r\\n    /// @dev Unwraps WETH to withrdaw ethers, which are then sent to the \\\"to\\\" address.\\r\\n    /// @param to The address to send withdrawn ethers to.\\r\\n    /// @param quantity The quantity of WETH to unwrap.\\r\\n    ///\\r\\n    function _withdrawEthAndSend(\\r\\n        IWETH weth,\\r\\n        address to,\\r\\n        uint256 quantity\\r\\n    ) internal {\\r\\n        // Withdraw ethers with weth.\\r\\n        weth.withdraw(quantity);\\r\\n\\r\\n        // Send ether.\\r\\n        (bool success, ) = to.call.value(quantity)(\\\"\\\");\\r\\n\\r\\n        // Revert is call is unsuccessful.\\r\\n        require(success, \\\"ERR_SENDING_ETHER\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3b4f9c7a9cad0aa86479ce9fa60c2bfb2ffe75910686179b82872b9467c07091\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003a9338038062003a93833981810160405260608110156200003757600080fd5b508051602082015160409092015160016000556003549192916001600160a01b0316156200009e576040805162461bcd60e51b815260206004820152600f60248201526e11549497d253925512505312569151608a1b604482015290519081900360640190fd5b6002546001600160a01b031615620000ef576040805162461bcd60e51b815260206004820152600f60248201526e11549497d253925512505312569151608a1b604482015290519081900360640190fd5b6001546001600160a01b03161562000140576040805162461bcd60e51b815260206004820152600f60248201526e11549497d253925512505312569151608a1b604482015290519081900360640190fd5b600380546001600160a01b038086166001600160a01b03199283161790925560028054858416908316179055600180549284169290911691909117905560405133907f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e690600090a25050506138d880620001bb6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806369d12e1411610097578063c45a015511610066578063c45a0155146105c1578063cd045524146105c9578063f887ea40146105fb578063fd52c6bb14610603576100f5565b806369d12e14146103c15780639245d5831461041157806395f0ae7614610457578063b17d0570146104f0576100f5565b806317d7de7c116100d357806317d7de7c146101c85780632e16cab31461024557806360060ccd146102a957806369bd26cd14610393576100f5565b80630d8e6e2c146100fa57806310d1e85c146101185780631758078b146101a4575b600080fd5b610102610631565b6040805160ff9092168252519081900360200190f35b6101a26004803603608081101561012e57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561016457600080fd5b82018360208201111561017657600080fd5b803590602001918460018302840111600160201b8311171561019757600080fd5b509092509050610636565b005b6101ac610889565b604080516001600160a01b039092168252519081900360200190f35b6101d0610898565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561020a5781810151838201526020016101f2565b50505050905090810190601f1680156102375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61028b600480360360c081101561025b57600080fd5b506001600160a01b0381358116916020810135916040820135916060810135916080820135169060a001356108cf565b60408051938452602084019290925282820152519081900360600190f35b61037a600480360360c08110156102bf57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b8111156102fe57600080fd5b82018360208201111561031057600080fd5b803590602001918460208302840111600160201b8311171561033157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b031691506109519050565b6040805192835260208301919091528051918290030190f35b6101ac600480360360408110156103a957600080fd5b506001600160a01b03813581169160200135166109c6565b61037a600480360360e08110156103d757600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160808201359160a08101359091169060c00135610a54565b6104436004803603606081101561042757600080fd5b506001600160a01b038135169060208101359060400135610ae0565b604080519115158252519081900360200190f35b610443600480360360c081101561046d57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b8111156104a357600080fd5b8201836020820111156104b557600080fd5b803590602001918460208302840111600160201b831117156104d657600080fd5b91935091506001600160a01b038135169060200135611035565b61037a600480360360c081101561050657600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561054557600080fd5b82018360208201111561055757600080fd5b803590602001918460208302840111600160201b8311171561057857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b031691506110e69050565b6101ac61115b565b610443600480360360608110156105df57600080fd5b506001600160a01b03813516906020810135906040013561116a565b6101ac611577565b6101ac6004803603604081101561061957600080fd5b506001600160a01b0381358116916020013516611586565b600390565b6000336001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561067157600080fd5b505afa158015610685573d6000803e3d6000fd5b505050506040513d602081101561069b57600080fd5b50516040805163d21220a760e01b81529051919250600091339163d21220a7916004808301926020929190829003018186803b1580156106da57600080fd5b505afa1580156106ee573d6000803e3d6000fd5b505050506040513d602081101561070457600080fd5b50516002546040805163e6a4390560e01b81526001600160a01b0386811660048301528085166024830152915193945091169163e6a4390591604480820192602092909190829003018186803b15801561075d57600080fd5b505afa158015610771573d6000803e3d6000fd5b505050506040513d602081101561078757600080fd5b50516001600160a01b0316331461079a57fe5b60006060306001600160a01b03168686604051808383808284376040519201945060009350909150508083038183865af19150503d80600081146107fa576040519150601f19603f3d011682016040523d82523d6000602084013e6107ff565b606091505b509150915081801561082d57508051158061082d575080806020019051602081101561082a57600080fd5b50515b61087e576040805162461bcd60e51b815260206004820152601760248201527f4552525f554e495357415056325f43414c4c5f4641494c000000000000000000604482015290519081900360640190fd5b505050505050505050565b6001546001600160a01b031681565b60408051808201909152601d81527f5072696d69746976655631556e6973776170436f6e6e6563746f723033000000602082015290565b60008060006002600054141561091a576040805162461bcd60e51b815260206004820152601f6024820152600080516020613798833981519152604482015290519081900360640190fd5b600260005560035461093a906001600160a01b03168a8a8a8a8a8a61166d565b6001600055919b909a509098509650505050505050565b600354600090819081908190610975906001600160a01b03168b8b8b8b8b8b611a38565b6040805183815260208101839052815193955091935033927f3725145ca6a6d192a761e3b6dbcf42cdc13147dd45a65fd1b29737ac584b557e9281900390910190a290999098509650505050505050565b600254604080516364e329cb60e11b81526001600160a01b038581166004830152848116602483015291516000938493169163c9c6539691604480830192602092919082900301818787803b158015610a1e57600080fd5b505af1158015610a32573d6000803e3d6000fd5b505050506040513d6020811015610a4857600080fd5b50519150505b92915050565b60008060026000541415610a9d576040805162461bcd60e51b815260206004820152601f6024820152600080516020613798833981519152604482015290519081900360640190fd5b6002600081905554600354600154610acb926001600160a01b0390811692811691168c8c8c8c8c8c8c6120c6565b6001600055909a909950975050505050505050565b600060026000541415610b28576040805162461bcd60e51b815260206004820152601f6024820152600080516020613798833981519152604482015290519081900360640190fd5b60026000819055506000846001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b6b57600080fd5b505afa158015610b7f573d6000803e3d6000fd5b505050506040513d6020811015610b9557600080fd5b505160408051632207afe960e11b815290519192506000916001600160a01b0388169163440f5fd2916004808301926020929190829003018186803b158015610bdd57600080fd5b505afa158015610bf1573d6000803e3d6000fd5b505050506040513d6020811015610c0757600080fd5b50516002546040805163e6a4390560e01b81526001600160a01b03868116600483015280851660248301529151939450600093919092169163e6a43905916044808301926020929190829003018186803b158015610c6457600080fd5b505afa158015610c78573d6000803e3d6000fd5b505050506040513d6020811015610c8e57600080fd5b50516040805160028082526060808301845293945090916020830190803883390190505090508281600081518110610cc257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110610cf057fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600082905060006040518060800160405280605081526020016137b860509139805190602001209050606081858c8c8c883360405160240180876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b0316815260200185815260200184815260200180602001836001600160a01b03166001600160a01b03168152602001828103825284818151815260200191508051906020019060200280838360005b83811015610dd9578181015183820152602001610dc1565b50505050905001975050505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090506000876001600160a01b0316846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6357600080fd5b505afa158015610e77573d6000803e3d6000fd5b505050506040513d6020811015610e8d57600080fd5b50516001600160a01b031614610ea4576000610ea6565b8a5b90506000886001600160a01b0316856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610eed57600080fd5b505afa158015610f01573d6000803e3d6000fd5b505050506040513d6020811015610f1757600080fd5b50516001600160a01b031614610f2d578b610f30565b60005b9050846001600160a01b031663022c0d9f838330876040518563ffffffff1660e01b815260040180858152602001848152602001836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610fb5578181015183820152602001610f9d565b50505050905090810190601f168015610fe25780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561100457600080fd5b505af1158015611018573d6000803e3d6000fd5b505050506001995050505050505050505060016000559392505050565b60006002600054141561107d576040805162461bcd60e51b815260206004820152601f6024820152600080516020613798833981519152604482015290519081900360640190fd5b6002600090815560035460408051602080890282810182019093528882526110d4936001600160a01b0316928d928d928d928d918d9182918501908490808284376000920191909152508c92508b91506126ba9050565b60016000559998505050505050505050565b60035460009081908190819061110a906001600160a01b03168b8b8b8b8b8b6127b8565b6040805183815260208101839052815193955091935033927ff17aa7749e04732ce7bde5ee88376144e6c5669bd4d8c80358119eada62a1d009281900390910190a290999098509650505050505050565b6002546001600160a01b031681565b6000600260005414156111b2576040805162461bcd60e51b815260206004820152601f6024820152600080516020613798833981519152604482015290519081900360640190fd5b60026000819055506000846001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f557600080fd5b505afa158015611209573d6000803e3d6000fd5b505050506040513d602081101561121f57600080fd5b505160408051632207afe960e11b815290519192506000916001600160a01b0388169163440f5fd2916004808301926020929190829003018186803b15801561126757600080fd5b505afa15801561127b573d6000803e3d6000fd5b505050506040513d602081101561129157600080fd5b50516002546040805163e6a4390560e01b81526001600160a01b03868116600483015280851660248301529151939450600093919092169163e6a43905916044808301926020929190829003018186803b1580156112ee57600080fd5b505afa158015611302573d6000803e3d6000fd5b505050506040513d602081101561131857600080fd5b5051604080516002808252606080830184529394509091602083019080388339019050509050838160008151811061134c57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061137a57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000829050600060405180608001604052806050815260200161382960509139805190602001209050606081858c8c8c883360405160240180876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b0316815260200185815260200184815260200180602001836001600160a01b03166001600160a01b03168152602001828103825284818151815260200191508051906020019060200280838360005b8381101561146357818101518382015260200161144b565b50505050905001975050505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090506000866001600160a01b0316846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ed57600080fd5b505afa158015611501573d6000803e3d6000fd5b505050506040513d602081101561151757600080fd5b50516001600160a01b03161461152e576000611530565b8a5b90506000876001600160a01b0316856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610eed57600080fd5b6003546001600160a01b031681565b6002546040805163e6a4390560e01b81526001600160a01b038581166004830152848116602483015291516000938493169163e6a43905916044808301926020929190829003018186803b1580156115dd57600080fd5b505afa1580156115f1573d6000803e3d6000fd5b505050506040513d602081101561160757600080fd5b505190506001600160a01b038116611666576040805162461bcd60e51b815260206004820152601760248201527f4552525f504149525f444f45535f4e4f545f4558495354000000000000000000604482015290519081900360640190fd5b9392505050565b60008080808080808c611681818e30612ea5565b925061169f90506001600160a01b038216338f63ffffffff612ff616565b5060008e905060008e6001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e057600080fd5b505afa1580156116f4573d6000803e3d6000fd5b505050506040513d602081101561170a57600080fd5b8101908080519060200190929190505050905060008f6001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561175857600080fd5b505afa15801561176c573d6000803e3d6000fd5b505050506040513d602081101561178257600080fd5b505190508d8d8d8d6117a56001600160a01b03861633308763ffffffff61304d16565b6040805163095ea7b360e01b81526001600160a01b038981166004830152600019602483015291519188169163095ea7b3916044808201926020929091908290030181600087803b1580156117f957600080fd5b505af115801561180d573d6000803e3d6000fd5b505050506040513d602081101561182357600080fd5b50506040805163095ea7b360e01b81526001600160a01b038981166004830152600019602483015291519187169163095ea7b3916044808201926020929091908290030181600087803b15801561187957600080fd5b505af115801561188d573d6000803e3d6000fd5b505050506040513d60208110156118a357600080fd5b50506040805162e8e33760e81b81526001600160a01b0388811660048301528781166024830152604482018b905260648201879052608482018b905260a4820186905284811660c483015260e4820184905291519189169163e8e3370091610104808201926060929091908290030181600087803b15801561192457600080fd5b505af1158015611938573d6000803e3d6000fd5b505050506040513d606081101561194e57600080fd5b5080516020820151604090920151909c50909a509850878b1461196d57fe5b5050505050505060008d90506000848d11611989576000611999565b6119998d8663ffffffff6130ad16565b90508015611a2157611a213382846001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b505afa1580156119f3573d6000803e3d6000fd5b505050506040513d6020811015611a0957600080fd5b50516001600160a01b0316919063ffffffff612ff616565b50939e929d50909b50909950505050505050505050565b600080333014611a7e576040805162461bcd60e51b815260206004820152600c60248201526b22a9292fa727aa2fa9a2a62360a11b604482015290519081900360640190fd5b60008611611abe576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b6000876001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b158015611af957600080fd5b505afa158015611b0d573d6000803e3d6000fd5b505050506040513d6020811015611b2357600080fd5b505160408051632f310bad60e01b815290519192506000916001600160a01b038b1691632f310bad916004808301926020929190829003018186803b158015611b6b57600080fd5b505afa158015611b7f573d6000803e3d6000fd5b505050506040513d6020811015611b9557600080fd5b505186519091506001600160a01b0382169087906001908110611bb457fe5b60200260200101516001600160a01b031614611c17576040805162461bcd60e51b815260206004820152601760248201527f4552525f454e445f504154485f4e4f545f52454445454d000000000000000000604482015290519081900360640190fd5b611c316001600160a01b0382168a8a63ffffffff612ff616565b6000611d248a6001600160a01b031662fe19fa6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6e57600080fd5b505afa158015611c82573d6000803e3d6000fd5b505050506040513d6020811015611c9857600080fd5b5051604080516316b2542760e31b81529051611d18916001600160a01b038f169163b592a13891600480820192602092909190829003018186803b158015611cdf57600080fd5b505afa158015611cf3573d6000803e3d6000fd5b505050506040513d6020811015611d0957600080fd5b50518c9063ffffffff6130ef16565b9063ffffffff61314816565b9050611d416001600160a01b038b16878c8463ffffffff61304d16565b60408051638349980560e01b815230600482015290516000916001600160a01b038d169163834998059160248082019260609290919082900301818787803b158015611d8c57600080fd5b505af1158015611da0573d6000803e3d6000fd5b505050506040513d6060811015611db657600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050509250505060008060008f90506060816001600160a01b0316631f00ca748f8e6040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611e4f578181015183820152602001611e37565b50505050905001935050505060006040518083038186803b158015611e7357600080fd5b505afa158015611e87573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611eb057600080fd5b8101908080516040519392919084600160201b821115611ecf57600080fd5b908301906020820185811115611ee457600080fd5b82518660208202830111600160201b82111715611f0057600080fd5b82525081516020918201928201910280838360005b83811015611f2d578181015183820152602001611f15565b505050509050016040525050509050600081600081518110611f4b57fe5b60200260200101519050808611611f63576000611f73565b611f73868263ffffffff6130ad16565b93506000868211611f85576000611f95565b611f95828863ffffffff6130ad16565b90508015611fa1578095505b8415611fba57611fb7878663ffffffff6130ad16565b96505b50611fd3925050506001600160a01b0387168f85612ff6565b811561204457808b1115612024576040805162461bcd60e51b815260206004820152601360248201527211549497d39151d05512559157d4105653d555606a1b604482015290519081900360640190fd5b612044898f84896001600160a01b031661304d909392919063ffffffff16565b80156120b1578a811015612097576040805162461bcd60e51b815260206004820152601560248201527422a9292fa82922a6a4aaa6afaaa72222a92fa6a4a760591b604482015290519081900360640190fd5b6120b16001600160a01b0387168a8363ffffffff612ff616565b919e919d50909b505050505050505050505050565b6000806000896001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561210457600080fd5b505afa158015612118573d6000803e3d6000fd5b505050506040513d602081101561212e57600080fd5b8101908080519060200190929190505050905060008d6001600160a01b031663e6a43905838c6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001826001600160a01b03166001600160a01b031681526020019250505060206040518083038186803b1580156121b357600080fd5b505afa1580156121c7573d6000803e3d6000fd5b505050506040513d60208110156121dd57600080fd5b505190506121fc6001600160a01b03821633308c63ffffffff61304d16565b6040805163095ea7b360e01b81526001600160a01b038f81166004830152600019602483015291519183169163095ea7b3916044808201926020929091908290030181600087803b15801561225057600080fd5b505af1158015612264573d6000803e3d6000fd5b505050506040513d602081101561227a57600080fd5b810190808051906020019092919050505050506000808d6001600160a01b031663baa2abde848d8d8d8d308d6040518863ffffffff1660e01b815260040180886001600160a01b03166001600160a01b03168152602001876001600160a01b03166001600160a01b03168152602001868152602001858152602001848152602001836001600160a01b03166001600160a01b031681526020018281526020019750505050505050506040805180830381600087803b15801561233b57600080fd5b505af115801561234f573d6000803e3d6000fd5b505050506040513d604081101561236557600080fd5b8101908080519060200190929190805190602001909291905050509150915060008c9050806001600160a01b031663095ea7b38f6000196040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156123eb57600080fd5b505af11580156123ff573d6000803e3d6000fd5b505050506040513d602081101561241557600080fd5b810190808051906020019092919050505050836001600160a01b031663095ea7b38f6000196040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561248957600080fd5b505af115801561249d573d6000803e3d6000fd5b505050506040513d60208110156124b357600080fd5b505060408051627f0cfd60e11b815290516000916125cc91670de0b6b3a764000091611d18916001600160a01b0387169162fe19fa916004808301926020929190829003018186803b15801561250857600080fd5b505afa15801561251c573d6000803e3d6000fd5b505050506040513d602081101561253257600080fd5b5051604080516316b2542760e31b81529051611d1891670de0b6b3a7640000916125c0916001600160a01b038b169163b592a13891600480820192602092909190829003018186803b15801561258757600080fd5b505afa15801561259b573d6000803e3d6000fd5b505050506040513d60208110156125b157600080fd5b50518b9063ffffffff6130ef16565b9063ffffffff6130ef16565b90506125e96001600160a01b03831633308463ffffffff61304d16565b8e6001600160a01b031663b8a6bb3b83838c6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001838152602001826001600160a01b03166001600160a01b031681526020019350505050606060405180830381600087803b15801561266357600080fd5b505af1158015612677573d6000803e3d6000fd5b505050506040513d606081101561268d57600080fd5b506126a6925050506001600160a01b038c168883612ff6565b909e909d509b505050505050505050505050565b60008060006126ca898930612ea5565b915091506000896001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561270957600080fd5b505afa15801561271d573d6000803e3d6000fd5b505050506040513d602081101561273357600080fd5b5051905060006127488c83858c8c8c8c61318a565b9150508061278f576040805162461bcd60e51b815260206004820152600f60248201526e11549497d4d5d05417d19052531151608a1b604482015290519081900360640190fd5b6127a96001600160a01b038c16888663ffffffff612ff616565b9b9a5050505050505050505050565b6000803330146127fe576040805162461bcd60e51b815260206004820152600c60248201526b22a9292fa727aa2fa9a2a62360a11b604482015290519081900360640190fd5b6000861161283e576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b6000806000896001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561287c57600080fd5b505afa158015612890573d6000803e3d6000fd5b505050506040513d60208110156128a657600080fd5b505187519091506001600160a01b03821690889060019081106128c557fe5b60200260200101516001600160a01b031614612928576040805162461bcd60e51b815260206004820152601b60248201527f4552525f454e445f504154485f4e4f545f554e4445524c59494e470000000000604482015290519081900360640190fd5b6129426001600160a01b0382168b8b63ffffffff612ff616565b60408051633ea6b5f160e21b815230600482015281516001600160a01b038d169263fa9ad7c492602480820193918290030181600087803b15801561298657600080fd5b505af115801561299a573d6000803e3d6000fd5b505050506040513d60408110156129b057600080fd5b810190808051906020019092919080519060200190929190505050809350819450505060008060008e90506060816001600160a01b0316631f00ca748e8d6040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015612a43578181015183820152602001612a2b565b50505050905001935050505060006040518083038186803b158015612a6757600080fd5b505afa158015612a7b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612aa457600080fd5b8101908080516040519392919084600160201b821115612ac357600080fd5b908301906020820185811115612ad857600080fd5b82518660208202830111600160201b82111715612af457600080fd5b82525081516020918201928201910280838360005b83811015612b21578181015183820152602001612b09565b505050509050016040525050509050600081600081518110612b3f57fe5b602002602001015190506000878211612b59576000612b69565b612b69828963ffffffff6130ad16565b9050818811612b79576000612b89565b612b89888363ffffffff6130ad16565b94508015612d455760608d90506060856001600160a01b031663d06ca61f84846040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015612bfe578181015183820152602001612be6565b50505050905001935050505060006040518083038186803b158015612c2257600080fd5b505afa158015612c36573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612c5f57600080fd5b8101908080516040519392919084600160201b821115612c7e57600080fd5b908301906020820185811115612c9357600080fd5b82518660208202830111600160201b82111715612caf57600080fd5b82525081516020918201928201910280838360005b83811015612cdc578181015183820152602001612cc4565b505050509050016040525050509050612d40620186a0611d1883600181518110612d0257fe5b6020026020010151612d346201870586600181518110612d1e57fe5b60200260200101516130ef90919063ffffffff16565b9063ffffffff61340616565b975050505b8415612d5e57612d5b888663ffffffff6130ad16565b97505b5050505060008c6001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9d57600080fd5b505afa158015612db1573d6000803e3d6000fd5b505050506040513d6020811015612dc757600080fd5b50519050612de56001600160a01b0382168f8763ffffffff612ff616565b8215612e5757828b1015612e37576040805162461bcd60e51b815260206004820152601460248201527308aa4a4bea0a48a9a92aa9abe9eac8aa4be9a82b60631b604482015290519081900360640190fd5b612e57898f85876001600160a01b031661304d909392919063ffffffff16565b8115612e7757612e776001600160a01b0382168a8463ffffffff612ff616565b612e916001600160a01b038e168a8863ffffffff612ff616565b50939d909c509a5050505050505050505050565b60008060008411612ee8576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b612f6a338686886001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b158015612f2757600080fd5b505afa158015612f3b573d6000803e3d6000fd5b505050506040513d6020811015612f5157600080fd5b50516001600160a01b031692919063ffffffff61304d16565b60408051633ea6b5f160e21b81526001600160a01b03858116600483015282516000938493928a169263fa9ad7c4926024808301939282900301818787803b158015612fb557600080fd5b505af1158015612fc9573d6000803e3d6000fd5b505050506040513d6040811015612fdf57600080fd5b508051602090910151909890975095505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052613048908490613460565b505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526130a7908590613460565b50505050565b600061166683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613511565b6000826130fe57506000610a4e565b8282028284828161310b57fe5b04146116665760405162461bcd60e51b81526004018080602001828103825260218152602001806138086021913960400191505060405180910390fd5b600061166683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506135a8565b60606000876001600160a01b0316856000815181106131a557fe5b60200260200101516001600160a01b031614613200576040805162461bcd60e51b815260206004820152601560248201527411549497d410551217d3d4151253d397d4d5105495605a1b604482015290519081900360640190fd5b6040805163095ea7b360e01b81526001600160a01b038b8116600483015260001960248301529151918a169163095ea7b3916044808201926020929091908290030181600087803b15801561325457600080fd5b505af1158015613268573d6000803e3d6000fd5b505050506040513d602081101561327e57600080fd5b50506040516338ed173960e01b815260048101888152602482018890526001600160a01b0386811660648401526084830186905260a060448401908152885160a48501528851918d16936338ed1739938c938c938c938c938c9390929160c401906020878101910280838360005b838110156133045781810151838201526020016132ec565b505050509050019650505050505050600060405180830381600087803b15801561332d57600080fd5b505af1158015613341573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561336a57600080fd5b8101908080516040519392919084600160201b82111561338957600080fd5b90830190602082018581111561339e57600080fd5b82518660208202830111600160201b821117156133ba57600080fd5b82525081516020918201928201910280838360005b838110156133e75781810151838201526020016133cf565b5050505090500160405250505091506001905097509795505050505050565b600082820183811015611666576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60606134b5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661360d9092919063ffffffff16565b805190915015613048578080602001905160208110156134d457600080fd5b50516130485760405162461bcd60e51b815260040180806020018281038252602a815260200180613879602a913960400191505060405180910390fd5b600081848411156135a05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561356557818101518382015260200161354d565b50505050905090810190601f1680156135925780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836135f75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561356557818101518382015260200161354d565b50600083858161360357fe5b0495945050505050565b606061361c8484600085613624565b949350505050565b606061362f85613791565b613680576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106136bf5780518252601f1990920191602091820191016136a0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613721576040519150601f19603f3d011682016040523d82523d6000602084013e613726565b606091505b5091509150811561373a57915061361c9050565b80511561374a5780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561356557818101518382015260200161354d565b3b15159056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00666c617368436c6f73654c6f6e674f7074696f6e735468656e5377617028616464726573732c616464726573732c75696e743235362c75696e743235362c616464726573735b5d2c6164647265737329536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77666c6173684d696e7453686f72744f7074696f6e735468656e5377617028616464726573732c616464726573732c75696e743235362c75696e743235362c616464726573735b5d2c61646472657373295361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220d9af275090abe1ff58227ff414cd87b954c6ced1bb5f4e5c39ba5cf2b8c1ece664736f6c63430006020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806369d12e1411610097578063c45a015511610066578063c45a0155146105c1578063cd045524146105c9578063f887ea40146105fb578063fd52c6bb14610603576100f5565b806369d12e14146103c15780639245d5831461041157806395f0ae7614610457578063b17d0570146104f0576100f5565b806317d7de7c116100d357806317d7de7c146101c85780632e16cab31461024557806360060ccd146102a957806369bd26cd14610393576100f5565b80630d8e6e2c146100fa57806310d1e85c146101185780631758078b146101a4575b600080fd5b610102610631565b6040805160ff9092168252519081900360200190f35b6101a26004803603608081101561012e57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b81111561016457600080fd5b82018360208201111561017657600080fd5b803590602001918460018302840111600160201b8311171561019757600080fd5b509092509050610636565b005b6101ac610889565b604080516001600160a01b039092168252519081900360200190f35b6101d0610898565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561020a5781810151838201526020016101f2565b50505050905090810190601f1680156102375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61028b600480360360c081101561025b57600080fd5b506001600160a01b0381358116916020810135916040820135916060810135916080820135169060a001356108cf565b60408051938452602084019290925282820152519081900360600190f35b61037a600480360360c08110156102bf57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b8111156102fe57600080fd5b82018360208201111561031057600080fd5b803590602001918460208302840111600160201b8311171561033157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b031691506109519050565b6040805192835260208301919091528051918290030190f35b6101ac600480360360408110156103a957600080fd5b506001600160a01b03813581169160200135166109c6565b61037a600480360360e08110156103d757600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160808201359160a08101359091169060c00135610a54565b6104436004803603606081101561042757600080fd5b506001600160a01b038135169060208101359060400135610ae0565b604080519115158252519081900360200190f35b610443600480360360c081101561046d57600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b8111156104a357600080fd5b8201836020820111156104b557600080fd5b803590602001918460208302840111600160201b831117156104d657600080fd5b91935091506001600160a01b038135169060200135611035565b61037a600480360360c081101561050657600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561054557600080fd5b82018360208201111561055757600080fd5b803590602001918460208302840111600160201b8311171561057857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b031691506110e69050565b6101ac61115b565b610443600480360360608110156105df57600080fd5b506001600160a01b03813516906020810135906040013561116a565b6101ac611577565b6101ac6004803603604081101561061957600080fd5b506001600160a01b0381358116916020013516611586565b600390565b6000336001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561067157600080fd5b505afa158015610685573d6000803e3d6000fd5b505050506040513d602081101561069b57600080fd5b50516040805163d21220a760e01b81529051919250600091339163d21220a7916004808301926020929190829003018186803b1580156106da57600080fd5b505afa1580156106ee573d6000803e3d6000fd5b505050506040513d602081101561070457600080fd5b50516002546040805163e6a4390560e01b81526001600160a01b0386811660048301528085166024830152915193945091169163e6a4390591604480820192602092909190829003018186803b15801561075d57600080fd5b505afa158015610771573d6000803e3d6000fd5b505050506040513d602081101561078757600080fd5b50516001600160a01b0316331461079a57fe5b60006060306001600160a01b03168686604051808383808284376040519201945060009350909150508083038183865af19150503d80600081146107fa576040519150601f19603f3d011682016040523d82523d6000602084013e6107ff565b606091505b509150915081801561082d57508051158061082d575080806020019051602081101561082a57600080fd5b50515b61087e576040805162461bcd60e51b815260206004820152601760248201527f4552525f554e495357415056325f43414c4c5f4641494c000000000000000000604482015290519081900360640190fd5b505050505050505050565b6001546001600160a01b031681565b60408051808201909152601d81527f5072696d69746976655631556e6973776170436f6e6e6563746f723033000000602082015290565b60008060006002600054141561091a576040805162461bcd60e51b815260206004820152601f6024820152600080516020613798833981519152604482015290519081900360640190fd5b600260005560035461093a906001600160a01b03168a8a8a8a8a8a61166d565b6001600055919b909a509098509650505050505050565b600354600090819081908190610975906001600160a01b03168b8b8b8b8b8b611a38565b6040805183815260208101839052815193955091935033927f3725145ca6a6d192a761e3b6dbcf42cdc13147dd45a65fd1b29737ac584b557e9281900390910190a290999098509650505050505050565b600254604080516364e329cb60e11b81526001600160a01b038581166004830152848116602483015291516000938493169163c9c6539691604480830192602092919082900301818787803b158015610a1e57600080fd5b505af1158015610a32573d6000803e3d6000fd5b505050506040513d6020811015610a4857600080fd5b50519150505b92915050565b60008060026000541415610a9d576040805162461bcd60e51b815260206004820152601f6024820152600080516020613798833981519152604482015290519081900360640190fd5b6002600081905554600354600154610acb926001600160a01b0390811692811691168c8c8c8c8c8c8c6120c6565b6001600055909a909950975050505050505050565b600060026000541415610b28576040805162461bcd60e51b815260206004820152601f6024820152600080516020613798833981519152604482015290519081900360640190fd5b60026000819055506000846001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b6b57600080fd5b505afa158015610b7f573d6000803e3d6000fd5b505050506040513d6020811015610b9557600080fd5b505160408051632207afe960e11b815290519192506000916001600160a01b0388169163440f5fd2916004808301926020929190829003018186803b158015610bdd57600080fd5b505afa158015610bf1573d6000803e3d6000fd5b505050506040513d6020811015610c0757600080fd5b50516002546040805163e6a4390560e01b81526001600160a01b03868116600483015280851660248301529151939450600093919092169163e6a43905916044808301926020929190829003018186803b158015610c6457600080fd5b505afa158015610c78573d6000803e3d6000fd5b505050506040513d6020811015610c8e57600080fd5b50516040805160028082526060808301845293945090916020830190803883390190505090508281600081518110610cc257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110610cf057fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600082905060006040518060800160405280605081526020016137b860509139805190602001209050606081858c8c8c883360405160240180876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b0316815260200185815260200184815260200180602001836001600160a01b03166001600160a01b03168152602001828103825284818151815260200191508051906020019060200280838360005b83811015610dd9578181015183820152602001610dc1565b50505050905001975050505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090506000876001600160a01b0316846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6357600080fd5b505afa158015610e77573d6000803e3d6000fd5b505050506040513d6020811015610e8d57600080fd5b50516001600160a01b031614610ea4576000610ea6565b8a5b90506000886001600160a01b0316856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610eed57600080fd5b505afa158015610f01573d6000803e3d6000fd5b505050506040513d6020811015610f1757600080fd5b50516001600160a01b031614610f2d578b610f30565b60005b9050846001600160a01b031663022c0d9f838330876040518563ffffffff1660e01b815260040180858152602001848152602001836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610fb5578181015183820152602001610f9d565b50505050905090810190601f168015610fe25780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561100457600080fd5b505af1158015611018573d6000803e3d6000fd5b505050506001995050505050505050505060016000559392505050565b60006002600054141561107d576040805162461bcd60e51b815260206004820152601f6024820152600080516020613798833981519152604482015290519081900360640190fd5b6002600090815560035460408051602080890282810182019093528882526110d4936001600160a01b0316928d928d928d928d918d9182918501908490808284376000920191909152508c92508b91506126ba9050565b60016000559998505050505050505050565b60035460009081908190819061110a906001600160a01b03168b8b8b8b8b8b6127b8565b6040805183815260208101839052815193955091935033927ff17aa7749e04732ce7bde5ee88376144e6c5669bd4d8c80358119eada62a1d009281900390910190a290999098509650505050505050565b6002546001600160a01b031681565b6000600260005414156111b2576040805162461bcd60e51b815260206004820152601f6024820152600080516020613798833981519152604482015290519081900360640190fd5b60026000819055506000846001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f557600080fd5b505afa158015611209573d6000803e3d6000fd5b505050506040513d602081101561121f57600080fd5b505160408051632207afe960e11b815290519192506000916001600160a01b0388169163440f5fd2916004808301926020929190829003018186803b15801561126757600080fd5b505afa15801561127b573d6000803e3d6000fd5b505050506040513d602081101561129157600080fd5b50516002546040805163e6a4390560e01b81526001600160a01b03868116600483015280851660248301529151939450600093919092169163e6a43905916044808301926020929190829003018186803b1580156112ee57600080fd5b505afa158015611302573d6000803e3d6000fd5b505050506040513d602081101561131857600080fd5b5051604080516002808252606080830184529394509091602083019080388339019050509050838160008151811061134c57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061137a57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000829050600060405180608001604052806050815260200161382960509139805190602001209050606081858c8c8c883360405160240180876001600160a01b03166001600160a01b03168152602001866001600160a01b03166001600160a01b0316815260200185815260200184815260200180602001836001600160a01b03166001600160a01b03168152602001828103825284818151815260200191508051906020019060200280838360005b8381101561146357818101518382015260200161144b565b50505050905001975050505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090506000866001600160a01b0316846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ed57600080fd5b505afa158015611501573d6000803e3d6000fd5b505050506040513d602081101561151757600080fd5b50516001600160a01b03161461152e576000611530565b8a5b90506000876001600160a01b0316856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610eed57600080fd5b6003546001600160a01b031681565b6002546040805163e6a4390560e01b81526001600160a01b038581166004830152848116602483015291516000938493169163e6a43905916044808301926020929190829003018186803b1580156115dd57600080fd5b505afa1580156115f1573d6000803e3d6000fd5b505050506040513d602081101561160757600080fd5b505190506001600160a01b038116611666576040805162461bcd60e51b815260206004820152601760248201527f4552525f504149525f444f45535f4e4f545f4558495354000000000000000000604482015290519081900360640190fd5b9392505050565b60008080808080808c611681818e30612ea5565b925061169f90506001600160a01b038216338f63ffffffff612ff616565b5060008e905060008e6001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e057600080fd5b505afa1580156116f4573d6000803e3d6000fd5b505050506040513d602081101561170a57600080fd5b8101908080519060200190929190505050905060008f6001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561175857600080fd5b505afa15801561176c573d6000803e3d6000fd5b505050506040513d602081101561178257600080fd5b505190508d8d8d8d6117a56001600160a01b03861633308763ffffffff61304d16565b6040805163095ea7b360e01b81526001600160a01b038981166004830152600019602483015291519188169163095ea7b3916044808201926020929091908290030181600087803b1580156117f957600080fd5b505af115801561180d573d6000803e3d6000fd5b505050506040513d602081101561182357600080fd5b50506040805163095ea7b360e01b81526001600160a01b038981166004830152600019602483015291519187169163095ea7b3916044808201926020929091908290030181600087803b15801561187957600080fd5b505af115801561188d573d6000803e3d6000fd5b505050506040513d60208110156118a357600080fd5b50506040805162e8e33760e81b81526001600160a01b0388811660048301528781166024830152604482018b905260648201879052608482018b905260a4820186905284811660c483015260e4820184905291519189169163e8e3370091610104808201926060929091908290030181600087803b15801561192457600080fd5b505af1158015611938573d6000803e3d6000fd5b505050506040513d606081101561194e57600080fd5b5080516020820151604090920151909c50909a509850878b1461196d57fe5b5050505050505060008d90506000848d11611989576000611999565b6119998d8663ffffffff6130ad16565b90508015611a2157611a213382846001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b1580156119df57600080fd5b505afa1580156119f3573d6000803e3d6000fd5b505050506040513d6020811015611a0957600080fd5b50516001600160a01b0316919063ffffffff612ff616565b50939e929d50909b50909950505050505050505050565b600080333014611a7e576040805162461bcd60e51b815260206004820152600c60248201526b22a9292fa727aa2fa9a2a62360a11b604482015290519081900360640190fd5b60008611611abe576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b6000876001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b158015611af957600080fd5b505afa158015611b0d573d6000803e3d6000fd5b505050506040513d6020811015611b2357600080fd5b505160408051632f310bad60e01b815290519192506000916001600160a01b038b1691632f310bad916004808301926020929190829003018186803b158015611b6b57600080fd5b505afa158015611b7f573d6000803e3d6000fd5b505050506040513d6020811015611b9557600080fd5b505186519091506001600160a01b0382169087906001908110611bb457fe5b60200260200101516001600160a01b031614611c17576040805162461bcd60e51b815260206004820152601760248201527f4552525f454e445f504154485f4e4f545f52454445454d000000000000000000604482015290519081900360640190fd5b611c316001600160a01b0382168a8a63ffffffff612ff616565b6000611d248a6001600160a01b031662fe19fa6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6e57600080fd5b505afa158015611c82573d6000803e3d6000fd5b505050506040513d6020811015611c9857600080fd5b5051604080516316b2542760e31b81529051611d18916001600160a01b038f169163b592a13891600480820192602092909190829003018186803b158015611cdf57600080fd5b505afa158015611cf3573d6000803e3d6000fd5b505050506040513d6020811015611d0957600080fd5b50518c9063ffffffff6130ef16565b9063ffffffff61314816565b9050611d416001600160a01b038b16878c8463ffffffff61304d16565b60408051638349980560e01b815230600482015290516000916001600160a01b038d169163834998059160248082019260609290919082900301818787803b158015611d8c57600080fd5b505af1158015611da0573d6000803e3d6000fd5b505050506040513d6060811015611db657600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050509250505060008060008f90506060816001600160a01b0316631f00ca748f8e6040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611e4f578181015183820152602001611e37565b50505050905001935050505060006040518083038186803b158015611e7357600080fd5b505afa158015611e87573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611eb057600080fd5b8101908080516040519392919084600160201b821115611ecf57600080fd5b908301906020820185811115611ee457600080fd5b82518660208202830111600160201b82111715611f0057600080fd5b82525081516020918201928201910280838360005b83811015611f2d578181015183820152602001611f15565b505050509050016040525050509050600081600081518110611f4b57fe5b60200260200101519050808611611f63576000611f73565b611f73868263ffffffff6130ad16565b93506000868211611f85576000611f95565b611f95828863ffffffff6130ad16565b90508015611fa1578095505b8415611fba57611fb7878663ffffffff6130ad16565b96505b50611fd3925050506001600160a01b0387168f85612ff6565b811561204457808b1115612024576040805162461bcd60e51b815260206004820152601360248201527211549497d39151d05512559157d4105653d555606a1b604482015290519081900360640190fd5b612044898f84896001600160a01b031661304d909392919063ffffffff16565b80156120b1578a811015612097576040805162461bcd60e51b815260206004820152601560248201527422a9292fa82922a6a4aaa6afaaa72222a92fa6a4a760591b604482015290519081900360640190fd5b6120b16001600160a01b0387168a8363ffffffff612ff616565b919e919d50909b505050505050505050505050565b6000806000896001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561210457600080fd5b505afa158015612118573d6000803e3d6000fd5b505050506040513d602081101561212e57600080fd5b8101908080519060200190929190505050905060008d6001600160a01b031663e6a43905838c6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001826001600160a01b03166001600160a01b031681526020019250505060206040518083038186803b1580156121b357600080fd5b505afa1580156121c7573d6000803e3d6000fd5b505050506040513d60208110156121dd57600080fd5b505190506121fc6001600160a01b03821633308c63ffffffff61304d16565b6040805163095ea7b360e01b81526001600160a01b038f81166004830152600019602483015291519183169163095ea7b3916044808201926020929091908290030181600087803b15801561225057600080fd5b505af1158015612264573d6000803e3d6000fd5b505050506040513d602081101561227a57600080fd5b810190808051906020019092919050505050506000808d6001600160a01b031663baa2abde848d8d8d8d308d6040518863ffffffff1660e01b815260040180886001600160a01b03166001600160a01b03168152602001876001600160a01b03166001600160a01b03168152602001868152602001858152602001848152602001836001600160a01b03166001600160a01b031681526020018281526020019750505050505050506040805180830381600087803b15801561233b57600080fd5b505af115801561234f573d6000803e3d6000fd5b505050506040513d604081101561236557600080fd5b8101908080519060200190929190805190602001909291905050509150915060008c9050806001600160a01b031663095ea7b38f6000196040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156123eb57600080fd5b505af11580156123ff573d6000803e3d6000fd5b505050506040513d602081101561241557600080fd5b810190808051906020019092919050505050836001600160a01b031663095ea7b38f6000196040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561248957600080fd5b505af115801561249d573d6000803e3d6000fd5b505050506040513d60208110156124b357600080fd5b505060408051627f0cfd60e11b815290516000916125cc91670de0b6b3a764000091611d18916001600160a01b0387169162fe19fa916004808301926020929190829003018186803b15801561250857600080fd5b505afa15801561251c573d6000803e3d6000fd5b505050506040513d602081101561253257600080fd5b5051604080516316b2542760e31b81529051611d1891670de0b6b3a7640000916125c0916001600160a01b038b169163b592a13891600480820192602092909190829003018186803b15801561258757600080fd5b505afa15801561259b573d6000803e3d6000fd5b505050506040513d60208110156125b157600080fd5b50518b9063ffffffff6130ef16565b9063ffffffff6130ef16565b90506125e96001600160a01b03831633308463ffffffff61304d16565b8e6001600160a01b031663b8a6bb3b83838c6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001838152602001826001600160a01b03166001600160a01b031681526020019350505050606060405180830381600087803b15801561266357600080fd5b505af1158015612677573d6000803e3d6000fd5b505050506040513d606081101561268d57600080fd5b506126a6925050506001600160a01b038c168883612ff6565b909e909d509b505050505050505050505050565b60008060006126ca898930612ea5565b915091506000896001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b15801561270957600080fd5b505afa15801561271d573d6000803e3d6000fd5b505050506040513d602081101561273357600080fd5b5051905060006127488c83858c8c8c8c61318a565b9150508061278f576040805162461bcd60e51b815260206004820152600f60248201526e11549497d4d5d05417d19052531151608a1b604482015290519081900360640190fd5b6127a96001600160a01b038c16888663ffffffff612ff616565b9b9a5050505050505050505050565b6000803330146127fe576040805162461bcd60e51b815260206004820152600c60248201526b22a9292fa727aa2fa9a2a62360a11b604482015290519081900360640190fd5b6000861161283e576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b6000806000896001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b15801561287c57600080fd5b505afa158015612890573d6000803e3d6000fd5b505050506040513d60208110156128a657600080fd5b505187519091506001600160a01b03821690889060019081106128c557fe5b60200260200101516001600160a01b031614612928576040805162461bcd60e51b815260206004820152601b60248201527f4552525f454e445f504154485f4e4f545f554e4445524c59494e470000000000604482015290519081900360640190fd5b6129426001600160a01b0382168b8b63ffffffff612ff616565b60408051633ea6b5f160e21b815230600482015281516001600160a01b038d169263fa9ad7c492602480820193918290030181600087803b15801561298657600080fd5b505af115801561299a573d6000803e3d6000fd5b505050506040513d60408110156129b057600080fd5b810190808051906020019092919080519060200190929190505050809350819450505060008060008e90506060816001600160a01b0316631f00ca748e8d6040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015612a43578181015183820152602001612a2b565b50505050905001935050505060006040518083038186803b158015612a6757600080fd5b505afa158015612a7b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612aa457600080fd5b8101908080516040519392919084600160201b821115612ac357600080fd5b908301906020820185811115612ad857600080fd5b82518660208202830111600160201b82111715612af457600080fd5b82525081516020918201928201910280838360005b83811015612b21578181015183820152602001612b09565b505050509050016040525050509050600081600081518110612b3f57fe5b602002602001015190506000878211612b59576000612b69565b612b69828963ffffffff6130ad16565b9050818811612b79576000612b89565b612b89888363ffffffff6130ad16565b94508015612d455760608d90506060856001600160a01b031663d06ca61f84846040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015612bfe578181015183820152602001612be6565b50505050905001935050505060006040518083038186803b158015612c2257600080fd5b505afa158015612c36573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612c5f57600080fd5b8101908080516040519392919084600160201b821115612c7e57600080fd5b908301906020820185811115612c9357600080fd5b82518660208202830111600160201b82111715612caf57600080fd5b82525081516020918201928201910280838360005b83811015612cdc578181015183820152602001612cc4565b505050509050016040525050509050612d40620186a0611d1883600181518110612d0257fe5b6020026020010151612d346201870586600181518110612d1e57fe5b60200260200101516130ef90919063ffffffff16565b9063ffffffff61340616565b975050505b8415612d5e57612d5b888663ffffffff6130ad16565b97505b5050505060008c6001600160a01b0316632f310bad6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9d57600080fd5b505afa158015612db1573d6000803e3d6000fd5b505050506040513d6020811015612dc757600080fd5b50519050612de56001600160a01b0382168f8763ffffffff612ff616565b8215612e5757828b1015612e37576040805162461bcd60e51b815260206004820152601460248201527308aa4a4bea0a48a9a92aa9abe9eac8aa4be9a82b60631b604482015290519081900360640190fd5b612e57898f85876001600160a01b031661304d909392919063ffffffff16565b8115612e7757612e776001600160a01b0382168a8463ffffffff612ff616565b612e916001600160a01b038e168a8863ffffffff612ff616565b50939d909c509a5050505050505050505050565b60008060008411612ee8576040805162461bcd60e51b81526020600482015260086024820152674552525f5a45524f60c01b604482015290519081900360640190fd5b612f6a338686886001600160a01b031663440f5fd26040518163ffffffff1660e01b815260040160206040518083038186803b158015612f2757600080fd5b505afa158015612f3b573d6000803e3d6000fd5b505050506040513d6020811015612f5157600080fd5b50516001600160a01b031692919063ffffffff61304d16565b60408051633ea6b5f160e21b81526001600160a01b03858116600483015282516000938493928a169263fa9ad7c4926024808301939282900301818787803b158015612fb557600080fd5b505af1158015612fc9573d6000803e3d6000fd5b505050506040513d6040811015612fdf57600080fd5b508051602090910151909890975095505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052613048908490613460565b505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526130a7908590613460565b50505050565b600061166683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613511565b6000826130fe57506000610a4e565b8282028284828161310b57fe5b04146116665760405162461bcd60e51b81526004018080602001828103825260218152602001806138086021913960400191505060405180910390fd5b600061166683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506135a8565b60606000876001600160a01b0316856000815181106131a557fe5b60200260200101516001600160a01b031614613200576040805162461bcd60e51b815260206004820152601560248201527411549497d410551217d3d4151253d397d4d5105495605a1b604482015290519081900360640190fd5b6040805163095ea7b360e01b81526001600160a01b038b8116600483015260001960248301529151918a169163095ea7b3916044808201926020929091908290030181600087803b15801561325457600080fd5b505af1158015613268573d6000803e3d6000fd5b505050506040513d602081101561327e57600080fd5b50506040516338ed173960e01b815260048101888152602482018890526001600160a01b0386811660648401526084830186905260a060448401908152885160a48501528851918d16936338ed1739938c938c938c938c938c9390929160c401906020878101910280838360005b838110156133045781810151838201526020016132ec565b505050509050019650505050505050600060405180830381600087803b15801561332d57600080fd5b505af1158015613341573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561336a57600080fd5b8101908080516040519392919084600160201b82111561338957600080fd5b90830190602082018581111561339e57600080fd5b82518660208202830111600160201b821117156133ba57600080fd5b82525081516020918201928201910280838360005b838110156133e75781810151838201526020016133cf565b5050505090500160405250505091506001905097509795505050505050565b600082820183811015611666576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60606134b5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661360d9092919063ffffffff16565b805190915015613048578080602001905160208110156134d457600080fd5b50516130485760405162461bcd60e51b815260040180806020018281038252602a815260200180613879602a913960400191505060405180910390fd5b600081848411156135a05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561356557818101518382015260200161354d565b50505050905090810190601f1680156135925780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836135f75760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561356557818101518382015260200161354d565b50600083858161360357fe5b0495945050505050565b606061361c8484600085613624565b949350505050565b606061362f85613791565b613680576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106136bf5780518252601f1990920191602091820191016136a0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613721576040519150601f19603f3d011682016040523d82523d6000602084013e613726565b606091505b5091509150811561373a57915061361c9050565b80511561374a5780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561356557818101518382015260200161354d565b3b15159056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00666c617368436c6f73654c6f6e674f7074696f6e735468656e5377617028616464726573732c616464726573732c75696e743235362c75696e743235362c616464726573735b5d2c6164647265737329536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77666c6173684d696e7453686f72744f7074696f6e735468656e5377617028616464726573732c616464726573732c75696e743235362c75696e743235362c616464726573735b5d2c61646472657373295361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220d9af275090abe1ff58227ff414cd87b954c6ced1bb5f4e5c39ba5cf2b8c1ece664736f6c63430006020033",
  "devdoc": {
    "methods": {
      "addShortLiquidityWithUnderlying(address,uint256,uint256,uint256,address,uint256)": {
        "details": "Adds redeemToken liquidity to a redeem<>token pair by minting shortOptionTokens with underlyingTokens.",
        "params": {
          "amountBMax": "The minimum quantity of shortOptionTokens expected to provide liquidity with.",
          "amountBMin": "The minimum quantity of otherTokens expected to provide liquidity with.",
          "deadline": "The timestamp to expire a pending transaction. \r",
          "optionAddress": "The address of the optionToken to get the redeemToken to mint then provide liquidity for.",
          "quantityOptions": "The quantity of underlyingTokens to use to mint option + redeem tokens.",
          "to": "The address that receives UNI-V2 shares."
        }
      },
      "closeFlashLong(address,uint256,uint256)": {
        "details": "Closes a longOptionToken position by flash swapping in redeemTokens, closing the option, and paying back in underlyingTokens.",
        "params": {
          "amountRedeems": "The quantity of redeemTokens to borrow to close the options.",
          "minPayout": "The minimum payout of underlyingTokens sent out to the user. \r",
          "optionToken": "The address of the longOptionTokens to close."
        }
      },
      "deployUniswapMarket(address,address)": {
        "details": "Creates a UniswapV2Pair by calling `createPair` on the UniswapV2Factory."
      },
      "flashCloseLongOptionsThenSwap(address,address,uint256,uint256,address[],address)": {
        "details": "Sends shortOptionTokens to msg.sender, and pays back the UniswapV2Pair in underlyingTokens.",
        "params": {
          "flashLoanQuantity": "The quantity of shortOptionTokens borrowed to use to close longOptionTokens.",
          "minPayout": "The minimum payout of underlyingTokens sent to the `to` address.",
          "optionAddress": "The address of the longOptionTokes to close.",
          "pairAddress": "The address of the redeemToken<>underlyingToken UniswapV2Pair contract.",
          "path": "underlyingTokens -> shortOptionTokens, because we are paying the input of underlyingTokens.",
          "to": "The address which is sent the underlyingToken payout, or liable to pay for a negative payout."
        }
      },
      "flashMintShortOptionsThenSwap(address,address,uint256,uint256,address[],address)": {
        "details": "Receives underlyingTokens from a UniswapV2Pair.swap() call from a pair with reserve0 = shortOptionTokens and reserve1 = underlyingTokens. Uses underlyingTokens to mint long (option) + short (redeem) tokens. Sends longOptionTokens to msg.sender, and pays back the UniswapV2Pair the shortOptionTokens, AND any remainder quantity of underlyingTokens (paid by msg.sender).",
        "params": {
          "flashLoanQuantity": "The quantity of options to mint using borrowed underlyingTokens.",
          "maxPremium": "The maximum quantity of underlyingTokens to pay for the optionTokens.",
          "optionAddress": "The address of the Option contract.",
          "path": "The token addresses to trade through using their Uniswap V2 pools. Assumes path[0] = shortOptionToken.",
          "to": "The address to send the shortOptionToken proceeds and longOptionTokens to."
        },
        "returns": {
          "_0": "success bool Whether the transaction was successful or not. \r"
        }
      },
      "getName()": {
        "details": "Gets the name of the contract."
      },
      "getUniswapMarketForTokens(address,address)": {
        "details": "Gets a UniswapV2Pair address for two tokens by calling the UniswapV2Factory."
      },
      "getVersion()": {
        "details": "Gets the version of the contract."
      },
      "mintShortOptionsThenSwapToTokens(address,uint256,uint256,address[],address,uint256)": {
        "details": "Mints long + short option tokens, then swaps the shortOptionTokens (redeem) for tokens.",
        "params": {
          "amountIn": "The quantity of options to mint.",
          "amountOutMin": "The minimum quantity of tokens to receive in exchange for the shortOptionTokens.",
          "deadline": "The timestamp for a trade to fail at if not successful.",
          "optionToken": "The address of the Option contract.",
          "path": "The token addresses to trade through using their Uniswap V2 pools. Assumes path[0] = shortOptionToken.",
          "to": "The address to send the shortOptionToken proceeds and longOptionTokens to."
        },
        "returns": {
          "_0": "bool Whether the transaction was successful or not. \r"
        }
      },
      "openFlashLong(address,uint256,uint256)": {
        "details": "Opens a longOptionToken position by minting long + short tokens, then selling the short tokens.",
        "params": {
          "amountOptions": "The quantity of longOptionTokens to purchase.",
          "maxPremium": "The maximum quantity of underlyingTokens to pay for the optionTokens. \r",
          "optionToken": "The option address."
        }
      },
      "removeShortLiquidityThenCloseOptions(address,address,uint256,uint256,uint256,address,uint256)": {
        "details": "Combines Uniswap V2 Router \"removeLiquidity\" function with Primitive \"closeOptions\" function.",
        "params": {
          "amountAMin": "The minimum quantity of shortOptionTokens to receive from removing liquidity.",
          "amountBMin": "The minimum quantity of quoteTokens to receive from removing liquidity.",
          "deadline": "The timestamp to expire a pending transaction. \r",
          "liquidity": "The quantity of liquidity tokens to pull from msg.sender and burn.",
          "optionAddress": "The address of the option that will be closed from burned UNI-V2 liquidity shares.",
          "otherTokenAddress": "The address of the other token in the option pair.",
          "to": "The address that receives quoteTokens from burned UNI-V2, and underlyingTokens from closed options."
        }
      },
      "uniswapV2Call(address,uint256,uint256,bytes)": {
        "details": "The callback function triggered in a UniswapV2Pair.swap() call when the `data` parameter has data.",
        "params": {
          "amount0": "The quantity of token0 received to the `to` address in the swap() call.",
          "amount1": "The quantity of token1 received to the `to` address in the swap() call.",
          "data": "The payload passed in the `data` parameter of the swap() call. \r",
          "sender": "The original msg.sender of the UniswapV2Pair.swap() call."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "addShortLiquidityWithUnderlying(address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Pulls underlying tokens from msg.sender and pushes UNI-V2 liquidity tokens to the \"to\" address. underlyingToken -> redeemToken -> UNI-V2."
      },
      "closeFlashLong(address,uint256,uint256)": {
        "notice": "IMPORTANT: If minPayout is 0, this function will cost the caller to close the option, for no gain."
      },
      "flashCloseLongOptionsThenSwap(address,address,uint256,uint256,address[],address)": {
        "notice": "IMPORTANT: If minPayout is 0, the `to` address is liable for negative payouts *if* that occurs."
      },
      "flashMintShortOptionsThenSwap(address,address,uint256,uint256,address[],address)": {
        "notice": "If the first address in the path is not the shortOptionToken address, the tx will fail."
      },
      "mintShortOptionsThenSwapToTokens(address,uint256,uint256,address[],address,uint256)": {
        "notice": "If the first address in the path is not the shortOptionToken address, the tx will fail. underlyingToken -> shortOptionToken -> quoteToken. IMPORTANT: redeemTokens = shortOptionTokens"
      },
      "openFlashLong(address,uint256,uint256)": {
        "notice": "IMPORTANT: amountOutMin parameter is the price to swap shortOptionTokens to underlyingTokens. IMPORTANT: If the ratio between shortOptionTokens and underlyingTokens is 1:1, then only the swap fee (0.30%) has to be paid."
      },
      "removeShortLiquidityThenCloseOptions(address,address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Pulls UNI-V2 liquidity shares with shortOption<>quote token, and optionTokens from msg.sender. Then closes the longOptionTokens and withdraws underlyingTokens to the \"to\" address. Sends quoteTokens from the burned UNI-V2 liquidity shares to the \"to\" address. UNI-V2 -> optionToken -> underlyingToken."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1174,
        "contract": "contracts/UniswapConnector03.sol:UniswapConnector03",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2616,
        "contract": "contracts/UniswapConnector03.sol:UniswapConnector03",
        "label": "trader",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITrader)1405"
      },
      {
        "astId": 2619,
        "contract": "contracts/UniswapConnector03.sol:UniswapConnector03",
        "label": "factory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IUniswapV2Factory)1942"
      },
      {
        "astId": 2622,
        "contract": "contracts/UniswapConnector03.sol:UniswapConnector03",
        "label": "router",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IUniswapV2Router02)2580"
      }
    ],
    "types": {
      "t_contract(ITrader)1405": {
        "encoding": "inplace",
        "label": "contract ITrader",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Factory)1942": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)2580": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}